grammar DDL;

options {
	backtrack=true;

	output=template;
}  


// Autogenerated import
@header {
	import gts.modernization.model.CST.impl.*;
	import gts.modernization.model.CST.*;
	import java.util.Iterator;
}

// Rules
data_definition returns [Node returnNode] 
: 	( data_definition_statementGen+=data_definition_statement)* 
	{
		// Create return CST Node
		Node data_definitionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		data_definitionReturnNode.setKind("data_definition");
	    // Create a CST Node
		if($data_definition_statementGen != null) {
	        for(Iterator it = $data_definition_statementGen.iterator(); it.hasNext(); )  { 
	            DDLParser.data_definition_statement_return r = (DDLParser.data_definition_statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("data_definition_statement");
	            	data_definitionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$data_definition.returnNode = data_definitionReturnNode;
	}
	;
	
data_definition_statement returns [Node returnNode] 
: 	 create_databaseGen+=create_database 
	{
		// Create return CST Node
		Node data_definition_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		data_definition_statementReturnNode.setKind("data_definition_statement");
	    // Create a CST Node
		if($create_databaseGen != null) {
	        for(Iterator it = $create_databaseGen.iterator(); it.hasNext(); )  { 
	            DDLParser.create_database_return r = (DDLParser.create_database_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("create_database");
	            	data_definition_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$data_definition_statement.returnNode = data_definition_statementReturnNode;
	}
	|	 create_tableGen+=create_table 
	{
		// Create return CST Node
		Node data_definition_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		data_definition_statementReturnNode.setKind("data_definition_statement");
	    // Create a CST Node
		if($create_tableGen != null) {
	        for(Iterator it = $create_tableGen.iterator(); it.hasNext(); )  { 
	            DDLParser.create_table_return r = (DDLParser.create_table_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("create_table");
	            	data_definition_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$data_definition_statement.returnNode = data_definition_statementReturnNode;
	}
	|	 create_comment_tableGen+=create_comment_table 
	{
		// Create return CST Node
		Node data_definition_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		data_definition_statementReturnNode.setKind("data_definition_statement");
	    // Create a CST Node
		if($create_comment_tableGen != null) {
	        for(Iterator it = $create_comment_tableGen.iterator(); it.hasNext(); )  { 
	            DDLParser.create_comment_table_return r = (DDLParser.create_comment_table_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("create_comment_table");
	            	data_definition_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$data_definition_statement.returnNode = data_definition_statementReturnNode;
	}
	|	 create_comment_columnGen+=create_comment_column 
	{
		// Create return CST Node
		Node data_definition_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		data_definition_statementReturnNode.setKind("data_definition_statement");
	    // Create a CST Node
		if($create_comment_columnGen != null) {
	        for(Iterator it = $create_comment_columnGen.iterator(); it.hasNext(); )  { 
	            DDLParser.create_comment_column_return r = (DDLParser.create_comment_column_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("create_comment_column");
	            	data_definition_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$data_definition_statement.returnNode = data_definition_statementReturnNode;
	}
	;
		
create_table returns [Node returnNode] 
:	 TK_0='CREATE' ( TK_1='OR REPLACE')?  TK_2='TABLE'  IDGen=ID  TK_3='(' ( create_columnGen+=create_column)* ( TK_4=',')?  ( create_pkGen+=create_pk)? ( TK_5=',')?  ( create_fkGen+=create_fk ( TK_6=',')?)*( create_ckGen+=create_ck ( TK_7=',')? )*    TK_8=')' ( TK_9='LOGGING')? ( TK_10='NOCOMPRESS')? ( TK_11='NOCACHE')? ( TK_12='NOPARALLEL')? ( TK_13='MONITORING')? TK_14=';' 
	{
		// Create return CST Node
		Node create_tableReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		create_tableReturnNode.setKind("create_table");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		create_tableReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		create_tableReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		create_tableReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			create_tableReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		create_tableReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Node
		if($create_columnGen != null) {
	        for(Iterator it = $create_columnGen.iterator(); it.hasNext(); )  { 
	            DDLParser.create_column_return r = (DDLParser.create_column_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("create_column");
	            	create_tableReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		create_tableReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a CST Node
		if($create_pkGen != null) {
	        for(Iterator it = $create_pkGen.iterator(); it.hasNext(); )  { 
	            DDLParser.create_pk_return r = (DDLParser.create_pk_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("create_pk");
	            	create_tableReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		create_tableReturnNode.getChildren().add(TK_5Leaf);
	 	}

		// Create a special CST Node for terminal create_fkGen aggregation
		if($create_fkGen != null) {
	    for(int pos = 0; pos < $create_fkGen.size(); pos++ )  { 
		// No Terminal extractor
	    if($create_fkGen != null) {		
	    	DDLParser.create_fk_return r = (DDLParser.create_fk_return) $create_fkGen.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("create_fk");
	    		create_tableReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		create_tableReturnNode.getChildren().add(TK_6Leaf);
	 	}
		}
		}


		// Create a special CST Node for terminal create_ckGen aggregation
		if($create_ckGen != null) {
	    for(int pos = 0; pos < $create_ckGen.size(); pos++ )  { 
		// No Terminal extractor
	    if($create_ckGen != null) {		
	    	DDLParser.create_ck_return r = (DDLParser.create_ck_return) $create_ckGen.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("create_ck");
	    		create_tableReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		create_tableReturnNode.getChildren().add(TK_7Leaf);
	 	}
		}
		}

	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		create_tableReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		create_tableReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		create_tableReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		create_tableReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		create_tableReturnNode.getChildren().add(TK_12Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_13 != null) {
			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_13.text, TK_13.getCharPositionInLine(), TK_13.getLine());
	 		create_tableReturnNode.getChildren().add(TK_13Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_14 != null) {
			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_14.text, TK_14.getCharPositionInLine(), TK_14.getLine());
	 		create_tableReturnNode.getChildren().add(TK_14Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$create_table.returnNode = create_tableReturnNode;
	} 
	;

create_comment_table returns [Node returnNode] 
:	 TK_0='COMMENT ON TABLE'  IDGen=ID  TK_1='IS'  CVALUEGen=CVALUE  TK_2=';' 
	{
		// Create return CST Node
		Node create_comment_tableReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		create_comment_tableReturnNode.setKind("create_comment_table");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		create_comment_tableReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			create_comment_tableReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		create_comment_tableReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($CVALUEGen != null) {
			Leaf CVALUEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("CVALUE", $CVALUEGen.text, CVALUEGen.getCharPositionInLine(), CVALUEGen.getLine());
			create_comment_tableReturnNode.getChildren().add(CVALUEGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		create_comment_tableReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$create_comment_table.returnNode = create_comment_tableReturnNode;
	}
	;

create_column returns [Node returnNode] 
:	 IDGen=ID  TYPEGen=TYPE ( TK_0='('  NUMBERGen=NUMBER ( TK_1='BYTE')? (  TK_2=','  NUMBERGen_1=NUMBER )?  TK_3=')')? ( TK_4='CONSTRAINT')? ( name_constraintGen+=name_constraint)? ( TK_5='NULL' |  TK_6='NOT NULL')? ( defectoGen+=defecto)? ( TK_7=',')? 
	{
		// Create return CST Node
		Node create_columnReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		create_columnReturnNode.setKind("create_column");
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			create_columnReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a CST Leaf
		if($TYPEGen != null) {
			Leaf TYPEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("TYPE", $TYPEGen.text, TYPEGen.getCharPositionInLine(), TYPEGen.getLine());
			create_columnReturnNode.getChildren().add(TYPEGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		create_columnReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			create_columnReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		create_columnReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		create_columnReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen_1 != null) {
			Leaf NUMBERGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen_1.text, NUMBERGen_1.getCharPositionInLine(), NUMBERGen_1.getLine());
			create_columnReturnNode.getChildren().add(NUMBERGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		create_columnReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		create_columnReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a CST Node
		if($name_constraintGen != null) {
	        for(Iterator it = $name_constraintGen.iterator(); it.hasNext(); )  { 
	            DDLParser.name_constraint_return r = (DDLParser.name_constraint_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("name_constraint");
	            	create_columnReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		create_columnReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		create_columnReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a CST Node
		if($defectoGen != null) {
	        for(Iterator it = $defectoGen.iterator(); it.hasNext(); )  { 
	            DDLParser.defecto_return r = (DDLParser.defecto_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("defecto");
	            	create_columnReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		create_columnReturnNode.getChildren().add(TK_7Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$create_column.returnNode = create_columnReturnNode;
	}
	;

defecto returns [Node returnNode] 
:	 TK_0='DEFAULT' ( TK_1='NULL' |  TK_2='NOT NULL' |  NUMBERGen=NUMBER |  CVALUEGen=CVALUE) 
	{
		// Create return CST Node
		Node defectoReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		defectoReturnNode.setKind("defecto");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		defectoReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		defectoReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		defectoReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			defectoReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($CVALUEGen != null) {
			Leaf CVALUEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("CVALUE", $CVALUEGen.text, CVALUEGen.getCharPositionInLine(), CVALUEGen.getLine());
			defectoReturnNode.getChildren().add(CVALUEGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$defecto.returnNode = defectoReturnNode;
	}
	;

create_comment_column returns [Node returnNode] 
:	 TK_0='COMMENT ON COLUMN'   table_referencesGen+=table_references  TK_1='\.'  IDGen=ID  TK_2='IS'   CVALUEGen=CVALUE  TK_3=';' 
	{
		// Create return CST Node
		Node create_comment_columnReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		create_comment_columnReturnNode.setKind("create_comment_column");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		create_comment_columnReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($table_referencesGen != null) {
	        for(Iterator it = $table_referencesGen.iterator(); it.hasNext(); )  { 
	            DDLParser.table_references_return r = (DDLParser.table_references_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("table_references");
	            	create_comment_columnReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		create_comment_columnReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			create_comment_columnReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		create_comment_columnReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($CVALUEGen != null) {
			Leaf CVALUEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("CVALUE", $CVALUEGen.text, CVALUEGen.getCharPositionInLine(), CVALUEGen.getLine());
			create_comment_columnReturnNode.getChildren().add(CVALUEGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		create_comment_columnReturnNode.getChildren().add(TK_3Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$create_comment_column.returnNode = create_comment_columnReturnNode;
	}
	;

create_ck returns [Node returnNode] 
:	 TK_0='CONSTRAINT'  IDGen=ID  TK_1='CHECK'  TK_2='('  column_ckGen+=column_ck  TK_3='IN'  TK_4='(' ( value_listGen+=value_list)*  TK_5=')'  TK_6=')' 
	{
		// Create return CST Node
		Node create_ckReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		create_ckReturnNode.setKind("create_ck");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		create_ckReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			create_ckReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		create_ckReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		create_ckReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($column_ckGen != null) {
	        for(Iterator it = $column_ckGen.iterator(); it.hasNext(); )  { 
	            DDLParser.column_ck_return r = (DDLParser.column_ck_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("column_ck");
	            	create_ckReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		create_ckReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		create_ckReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a CST Node
		if($value_listGen != null) {
	        for(Iterator it = $value_listGen.iterator(); it.hasNext(); )  { 
	            DDLParser.value_list_return r = (DDLParser.value_list_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("value_list");
	            	create_ckReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		create_ckReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		create_ckReturnNode.getChildren().add(TK_6Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$create_ck.returnNode = create_ckReturnNode;
	}
	;
	
create_fk returns [Node returnNode] 
:	 TK_0='CONSTRAINT'  IDGen=ID  TK_1='FOREIGN'  TK_2='KEY'  TK_3='(' ( column_listGen+=column_list)*  TK_4=')'  TK_5='REFERENCES' ( schema_referencesGen+=schema_references)? ( TK_6='\.')?  table_referencesGen+=table_references  TK_7='(' ( references_column_listGen+=references_column_list)*  TK_8=')' ( TK_9='ON')? ( TK_10='DELETE' |  TK_11='UPDATE')? ( TK_12='CASCADE')? ( TK_13='DISABLE')? 
	{
		// Create return CST Node
		Node create_fkReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		create_fkReturnNode.setKind("create_fk");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		create_fkReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			create_fkReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		create_fkReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		create_fkReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		create_fkReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Node
		if($column_listGen != null) {
	        for(Iterator it = $column_listGen.iterator(); it.hasNext(); )  { 
	            DDLParser.column_list_return r = (DDLParser.column_list_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("column_list");
	            	create_fkReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		create_fkReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		create_fkReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a CST Node
		if($schema_referencesGen != null) {
	        for(Iterator it = $schema_referencesGen.iterator(); it.hasNext(); )  { 
	            DDLParser.schema_references_return r = (DDLParser.schema_references_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("schema_references");
	            	create_fkReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		create_fkReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a CST Node
		if($table_referencesGen != null) {
	        for(Iterator it = $table_referencesGen.iterator(); it.hasNext(); )  { 
	            DDLParser.table_references_return r = (DDLParser.table_references_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("table_references");
	            	create_fkReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		create_fkReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a CST Node
		if($references_column_listGen != null) {
	        for(Iterator it = $references_column_listGen.iterator(); it.hasNext(); )  { 
	            DDLParser.references_column_list_return r = (DDLParser.references_column_list_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("references_column_list");
	            	create_fkReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		create_fkReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		create_fkReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		create_fkReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		create_fkReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		create_fkReturnNode.getChildren().add(TK_12Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_13 != null) {
			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_13.text, TK_13.getCharPositionInLine(), TK_13.getLine());
	 		create_fkReturnNode.getChildren().add(TK_13Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$create_fk.returnNode = create_fkReturnNode;
	}
	;

create_pk returns [Node returnNode] 
:	 TK_0='CONSTRAINT'  IDGen=ID  TK_1='PRIMARY KEY'  TK_2='(' ( column_listGen+=column_list)*  TK_3=')' 
	{
		// Create return CST Node
		Node create_pkReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		create_pkReturnNode.setKind("create_pk");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		create_pkReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			create_pkReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		create_pkReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		create_pkReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($column_listGen != null) {
	        for(Iterator it = $column_listGen.iterator(); it.hasNext(); )  { 
	            DDLParser.column_list_return r = (DDLParser.column_list_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("column_list");
	            	create_pkReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		create_pkReturnNode.getChildren().add(TK_3Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$create_pk.returnNode = create_pkReturnNode;
	}
	;

column_ck returns [Node returnNode] 
:	 IDGen=ID 
	{
		// Create return CST Node
		Node column_ckReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		column_ckReturnNode.setKind("column_ck");
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			column_ckReturnNode.getChildren().add(IDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$column_ck.returnNode = column_ckReturnNode;
	}
	;

schema_references returns [Node returnNode] 
:	 IDGen=ID 
	{
		// Create return CST Node
		Node schema_referencesReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		schema_referencesReturnNode.setKind("schema_references");
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			schema_referencesReturnNode.getChildren().add(IDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$schema_references.returnNode = schema_referencesReturnNode;
	}
	;

table_references returns [Node returnNode] 
:	 IDGen=ID 
	{
		// Create return CST Node
		Node table_referencesReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		table_referencesReturnNode.setKind("table_references");
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			table_referencesReturnNode.getChildren().add(IDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$table_references.returnNode = table_referencesReturnNode;
	}
	;

name_constraint returns [Node returnNode] 
:	 IDGen=ID 
	{
		// Create return CST Node
		Node name_constraintReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		name_constraintReturnNode.setKind("name_constraint");
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			name_constraintReturnNode.getChildren().add(IDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$name_constraint.returnNode = name_constraintReturnNode;
	}
	;

references_column_list returns [Node returnNode] 
:	 IDGen=ID ( TK_0=',')? 
	{
		// Create return CST Node
		Node references_column_listReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		references_column_listReturnNode.setKind("references_column_list");
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			references_column_listReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		references_column_listReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$references_column_list.returnNode = references_column_listReturnNode;
	}
	;

value_list returns [Node returnNode] 
:	 CVALUEGen=CVALUE ( TK_0=',')? 
	{
		// Create return CST Node
		Node value_listReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		value_listReturnNode.setKind("value_list");
	    // Create a CST Leaf
		if($CVALUEGen != null) {
			Leaf CVALUEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("CVALUE", $CVALUEGen.text, CVALUEGen.getCharPositionInLine(), CVALUEGen.getLine());
			value_listReturnNode.getChildren().add(CVALUEGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		value_listReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$value_list.returnNode = value_listReturnNode;
	}
	;

column_list returns [Node returnNode] 
:	 IDGen=ID ( TK_0=',')? 
	{
		// Create return CST Node
		Node column_listReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		column_listReturnNode.setKind("column_list");
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			column_listReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		column_listReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$column_list.returnNode = column_listReturnNode;
	}
	;

create_database returns [Node returnNode] 
:	 TK_0='CREATE' ( TK_1='DATABASE' |  TK_2='SCHEMA') ( TK_3='IF NOT EXISTS')?  IDGen=ID ( create_specificationGen+=create_specification)?  TK_4=';' 
	{
		// Create return CST Node
		Node create_databaseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		create_databaseReturnNode.setKind("create_database");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		create_databaseReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		create_databaseReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		create_databaseReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		create_databaseReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			create_databaseReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a CST Node
		if($create_specificationGen != null) {
	        for(Iterator it = $create_specificationGen.iterator(); it.hasNext(); )  { 
	            DDLParser.create_specification_return r = (DDLParser.create_specification_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("create_specification");
	            	create_databaseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		create_databaseReturnNode.getChildren().add(TK_4Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$create_database.returnNode = create_databaseReturnNode;
	}
	;

create_specification returns [Node returnNode] 
:	( TK_0='DEFAULT')?  TK_1='CHARACTER'  TK_2='SET' ( TK_3='=')?  IDGen=ID 
	{
		// Create return CST Node
		Node create_specificationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		create_specificationReturnNode.setKind("create_specification");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		create_specificationReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		create_specificationReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		create_specificationReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		create_specificationReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			create_specificationReturnNode.getChildren().add(IDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$create_specification.returnNode = create_specificationReturnNode;
	}
  	|	( TK_0='DEFAULT')?  TK_1='COLLATE' ( TK_2='=')?  IDGen=ID 
	{
		// Create return CST Node
		Node create_specificationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		create_specificationReturnNode.setKind("create_specification");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		create_specificationReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		create_specificationReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		create_specificationReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			create_specificationReturnNode.getChildren().add(IDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$create_specification.returnNode = create_specificationReturnNode;
	}
  	;

CVALUE 					: '\'' ( options {greedy=false;} : .)* '\'';
NUMBER					: ('0'..'9' | ',')*;
TYPE					: ('NUMBER' | 'INTEGER' | 'CHAR' | 'VARCHAR' | 'VARCHAR2' | 'TEXT' | 'DATE' | 'LONG' | 'LONG RAW' | 'RAW' | 'NVARCHAR2' | 'ROWID' | 'NCHAR' | 'MLSLABEL' | 'CLOB' | 'NCLOB' | 'BLOB' | 'BFILE' | 'FLOAT' | 'UROWID' | 'BINARY_DOUBLE' | 'BINARY_FLOAT' | 'URITYPE' | 'CHAR VARYING' | 'CHARACTER' | 'CHARACTER VARYING' | 'DECIMAL' | 'DOUBLE PRECISION' | 'INT' | 'NATIONAL CHAR' | 'NATIONAL CHAR VARYING' | 'NATIONAL CHARACTER' | 'NATIONAL CHARACTER VARYING' | 'NCHAR VARYING' | 'NUMERIC' | 'REAL' | 'SMALLINT');
ID 						: ('a'..'z' | 'A'..'Z') ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | '$' | '#' | '-' )*;
WS 						: (' ' | '\t' | '\n' | '\r')+ {$channel=HIDDEN;};
ML_COMMENT:
	'/*' (options {greedy=false;} : .)* '*/' (';')? { $channel=HIDDEN;}
	;
	
OL_COMMENT: '--' ( options {greedy=false;} : . )* '\n'+ { $channel=HIDDEN;}
	;
