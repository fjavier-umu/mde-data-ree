grammar DDL;

options
{
	backtrack=true;

	output=template;
}  


// Autogenerated import
@header {
	import gts.modernization.model.CST.impl.*;
	import gts.modernization.model.CST.*;
	import java.util.Iterator;
}

// Rules
data_definition returns [Node returnNode] 
: 	( data_definition_statementGen+=data_definition_statement)* 
	{
		// Create return CST Node
		Node data_definitionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		data_definitionReturnNode.setKind("data_definition");
	    // Create a CST Node
		if($data_definition_statementGen != null) {
	        for(Iterator it = $data_definition_statementGen.iterator(); it.hasNext(); )  { 
	            DDLParser.data_definition_statement_return r = (DDLParser.data_definition_statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("data_definition_statement");
	            	data_definitionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$data_definition.returnNode = data_definitionReturnNode;
	}
	;
	
data_definition_statement returns [Node returnNode] 
: 	 databaseGen+=database 
	{
		// Create return CST Node
		Node data_definition_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		data_definition_statementReturnNode.setKind("data_definition_statement");
	    // Create a CST Node
		if($databaseGen != null) {
	        for(Iterator it = $databaseGen.iterator(); it.hasNext(); )  { 
	            DDLParser.database_return r = (DDLParser.database_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("database");
	            	data_definition_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$data_definition_statement.returnNode = data_definition_statementReturnNode;
	}
	|	 tableGen+=table 
	{
		// Create return CST Node
		Node data_definition_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		data_definition_statementReturnNode.setKind("data_definition_statement");
	    // Create a CST Node
		if($tableGen != null) {
	        for(Iterator it = $tableGen.iterator(); it.hasNext(); )  { 
	            DDLParser.table_return r = (DDLParser.table_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("table");
	            	data_definition_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$data_definition_statement.returnNode = data_definition_statementReturnNode;
	}
	|	 alter_tableGen+=alter_table 
	{
		// Create return CST Node
		Node data_definition_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		data_definition_statementReturnNode.setKind("data_definition_statement");
	    // Create a CST Node
		if($alter_tableGen != null) {
	        for(Iterator it = $alter_tableGen.iterator(); it.hasNext(); )  { 
	            DDLParser.alter_table_return r = (DDLParser.alter_table_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("alter_table");
	            	data_definition_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$data_definition_statement.returnNode = data_definition_statementReturnNode;
	}
	;

table returns [Node returnNode] 
:	 TK_0='CREATE' ( LOG_CONJGen=LOG_CONJ  TK_1='REPLACE')?  TK_2='TABLE'  IDGen=ID  TK_3='(' ( columnGen+=column)* ( TK_4=',')? ( checGen+=chec ( TK_5=',')?)* ( pkGen+=pk)? ( TK_6=',')? ( ckGen+=ck ( TK_7=',')?)* ( fkGen+=fk ( TK_8=',')?)*  TK_9=')' ( TK_10='LOGGING')? ( TK_11='NOCOMPRESS')? ( TK_12='NOCACHE')? ( TK_13='NOPARALLEL')? ( TK_14='MONITORING')? TK_15=';' 
	{
		// Create return CST Node
		Node tableReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		tableReturnNode.setKind("table");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		tableReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($LOG_CONJGen != null) {
			Leaf LOG_CONJGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LOG_CONJ", $LOG_CONJGen.text, LOG_CONJGen.getCharPositionInLine(), LOG_CONJGen.getLine());
			tableReturnNode.getChildren().add(LOG_CONJGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		tableReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		tableReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			tableReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		tableReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Node
		if($columnGen != null) {
	        for(Iterator it = $columnGen.iterator(); it.hasNext(); )  { 
	            DDLParser.column_return r = (DDLParser.column_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("column");
	            	tableReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		tableReturnNode.getChildren().add(TK_4Leaf);
	 	}

		// Create a special CST Node for terminal checGen aggregation
		if($checGen != null) {
	    for(int pos = 0; pos < $checGen.size(); pos++ )  { 
		// No Terminal extractor
	    if($checGen != null) {		
	    	DDLParser.chec_return r = (DDLParser.chec_return) $checGen.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("chec");
	    		tableReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		tableReturnNode.getChildren().add(TK_5Leaf);
	 	}
		}
		}

	    // Create a CST Node
		if($pkGen != null) {
	        for(Iterator it = $pkGen.iterator(); it.hasNext(); )  { 
	            DDLParser.pk_return r = (DDLParser.pk_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("pk");
	            	tableReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		tableReturnNode.getChildren().add(TK_6Leaf);
	 	}

		// Create a special CST Node for terminal ckGen aggregation
		if($ckGen != null) {
	    for(int pos = 0; pos < $ckGen.size(); pos++ )  { 
		// No Terminal extractor
	    if($ckGen != null) {		
	    	DDLParser.ck_return r = (DDLParser.ck_return) $ckGen.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("ck");
	    		tableReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		tableReturnNode.getChildren().add(TK_7Leaf);
	 	}
		}
		}


		// Create a special CST Node for terminal fkGen aggregation
		if($fkGen != null) {
	    for(int pos = 0; pos < $fkGen.size(); pos++ )  { 
		// No Terminal extractor
	    if($fkGen != null) {		
	    	DDLParser.fk_return r = (DDLParser.fk_return) $fkGen.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("fk");
	    		tableReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		tableReturnNode.getChildren().add(TK_8Leaf);
	 	}
		}
		}

	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		tableReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		tableReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		tableReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		tableReturnNode.getChildren().add(TK_12Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_13 != null) {
			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_13.text, TK_13.getCharPositionInLine(), TK_13.getLine());
	 		tableReturnNode.getChildren().add(TK_13Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_14 != null) {
			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_14.text, TK_14.getCharPositionInLine(), TK_14.getLine());
	 		tableReturnNode.getChildren().add(TK_14Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_15 != null) {
			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_15.text, TK_15.getCharPositionInLine(), TK_15.getLine());
	 		tableReturnNode.getChildren().add(TK_15Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$table.returnNode = tableReturnNode;
	} 
	;

column returns [Node returnNode] 
:	 IDGen=ID  data_typeGen+=data_type ( TK_0='CONSTRAINT')? ( name_constraintGen+=name_constraint)? ( TK_1='NULL' |  TK_2='NOT NULL')? ( defectoGen+=defecto)? ( TK_3=',')? 
	{
		// Create return CST Node
		Node columnReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		columnReturnNode.setKind("column");
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			columnReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a CST Node
		if($data_typeGen != null) {
	        for(Iterator it = $data_typeGen.iterator(); it.hasNext(); )  { 
	            DDLParser.data_type_return r = (DDLParser.data_type_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("data_type");
	            	columnReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		columnReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($name_constraintGen != null) {
	        for(Iterator it = $name_constraintGen.iterator(); it.hasNext(); )  { 
	            DDLParser.name_constraint_return r = (DDLParser.name_constraint_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("name_constraint");
	            	columnReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		columnReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		columnReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($defectoGen != null) {
	        for(Iterator it = $defectoGen.iterator(); it.hasNext(); )  { 
	            DDLParser.defecto_return r = (DDLParser.defecto_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("defecto");
	            	columnReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		columnReturnNode.getChildren().add(TK_3Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$column.returnNode = columnReturnNode;
	}
	;

defecto returns [Node returnNode] 
:	 TK_0='DEFAULT' ( TK_1='NULL' |  TK_2='NOT NULL' |  NUMBERGen=NUMBER |  CVALUEGen=CVALUE) 
	{
		// Create return CST Node
		Node defectoReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		defectoReturnNode.setKind("defecto");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		defectoReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		defectoReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		defectoReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			defectoReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($CVALUEGen != null) {
			Leaf CVALUEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("CVALUE", $CVALUEGen.text, CVALUEGen.getCharPositionInLine(), CVALUEGen.getLine());
			defectoReturnNode.getChildren().add(CVALUEGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$defecto.returnNode = defectoReturnNode;
	}
	;

alter_table returns [Node returnNode] 
: 	 TK_0='ALTER TABLE'  table_referencesGen+=table_references  alter_table_specificationGen+=alter_table_specification ( TK_1=','  alter_table_specificationGen_1+=alter_table_specification)*  TK_2=';' 
	{
		// Create return CST Node
		Node alter_tableReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		alter_tableReturnNode.setKind("alter_table");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		alter_tableReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($table_referencesGen != null) {
	        for(Iterator it = $table_referencesGen.iterator(); it.hasNext(); )  { 
	            DDLParser.table_references_return r = (DDLParser.table_references_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("table_references");
	            	alter_tableReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($alter_table_specificationGen != null) {
	        for(Iterator it = $alter_table_specificationGen.iterator(); it.hasNext(); )  { 
	            DDLParser.alter_table_specification_return r = (DDLParser.alter_table_specification_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("alter_table_specification");
	            	alter_tableReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }

		// Create a special CST Node for terminal alter_table_specificationGen_1 aggregation
		if($alter_table_specificationGen_1 != null) {
	    for(int pos = 0; pos < $alter_table_specificationGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		alter_tableReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// No Terminal extractor
	    if($alter_table_specificationGen_1 != null) {		
	    	DDLParser.alter_table_specification_return r = (DDLParser.alter_table_specification_return) $alter_table_specificationGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("alter_table_specification");
	    		alter_tableReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}

	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		alter_tableReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$alter_table.returnNode = alter_tableReturnNode;
	}
	;
	
alter_table_specification returns [Node returnNode] 
:	 TK_0='ADD CONSTRAINT'  IDGen=ID  TK_1='FOREIGN KEY'  TK_2='(' ( column_listGen+=column_list)*  TK_3=')'  TK_4='REFERENCES' ( schema_referencesGen+=schema_references)? ( TK_5='\.')?  table_referencesGen+=table_references  TK_6='(' ( references_column_listGen+=references_column_list)*  TK_7=')' ( TK_8='ON')? ( TK_9='DELETE' |  TK_10='UPDATE')? ( TK_11='CASCADE')? ( TK_12='DISABLE')? ( TK_13='RESTRICT')? ( TK_14='NO ACTION')? ( TK_15='SET NULL')? 
	{
		// Create return CST Node
		Node alter_table_specificationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		alter_table_specificationReturnNode.setKind("alter_table_specification");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		alter_table_specificationReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			alter_table_specificationReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		alter_table_specificationReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		alter_table_specificationReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($column_listGen != null) {
	        for(Iterator it = $column_listGen.iterator(); it.hasNext(); )  { 
	            DDLParser.column_list_return r = (DDLParser.column_list_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("column_list");
	            	alter_table_specificationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		alter_table_specificationReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		alter_table_specificationReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a CST Node
		if($schema_referencesGen != null) {
	        for(Iterator it = $schema_referencesGen.iterator(); it.hasNext(); )  { 
	            DDLParser.schema_references_return r = (DDLParser.schema_references_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("schema_references");
	            	alter_table_specificationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		alter_table_specificationReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a CST Node
		if($table_referencesGen != null) {
	        for(Iterator it = $table_referencesGen.iterator(); it.hasNext(); )  { 
	            DDLParser.table_references_return r = (DDLParser.table_references_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("table_references");
	            	alter_table_specificationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		alter_table_specificationReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a CST Node
		if($references_column_listGen != null) {
	        for(Iterator it = $references_column_listGen.iterator(); it.hasNext(); )  { 
	            DDLParser.references_column_list_return r = (DDLParser.references_column_list_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("references_column_list");
	            	alter_table_specificationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		alter_table_specificationReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		alter_table_specificationReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		alter_table_specificationReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		alter_table_specificationReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		alter_table_specificationReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		alter_table_specificationReturnNode.getChildren().add(TK_12Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_13 != null) {
			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_13.text, TK_13.getCharPositionInLine(), TK_13.getLine());
	 		alter_table_specificationReturnNode.getChildren().add(TK_13Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_14 != null) {
			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_14.text, TK_14.getCharPositionInLine(), TK_14.getLine());
	 		alter_table_specificationReturnNode.getChildren().add(TK_14Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_15 != null) {
			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_15.text, TK_15.getCharPositionInLine(), TK_15.getLine());
	 		alter_table_specificationReturnNode.getChildren().add(TK_15Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$alter_table_specification.returnNode = alter_table_specificationReturnNode;
	}
	;

chec returns [Node returnNode] 
:	 TK_0='CONSTRAINT'  IDGen=ID  TK_1='CHECK'  TK_2='(' ( log_expresionGen+=log_expresion)+  TK_3=')' 
	{
		// Create return CST Node
		Node checReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		checReturnNode.setKind("chec");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		checReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			checReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		checReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		checReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($log_expresionGen != null) {
	        for(Iterator it = $log_expresionGen.iterator(); it.hasNext(); )  { 
	            DDLParser.log_expresion_return r = (DDLParser.log_expresion_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("log_expresion");
	            	checReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		checReturnNode.getChildren().add(TK_3Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$chec.returnNode = checReturnNode;
	}
	;
	
fk returns [Node returnNode] 
:	 TK_0='CONSTRAINT'  IDGen=ID  TK_1='FOREIGN KEY'  TK_2='(' ( column_listGen+=column_list)*  TK_3=')'  TK_4='REFERENCES' ( schema_referencesGen+=schema_references)? ( TK_5='\.')?  table_referencesGen+=table_references  TK_6='(' ( references_column_listGen+=references_column_list)*  TK_7=')' ( TK_8='ON')? ( TK_9='DELETE' |  TK_10='UPDATE')? ( TK_11='CASCADE')? ( TK_12='DISABLE')? ( TK_13='RESTRICT')? ( TK_14='NO ACTION')? ( TK_15='SET NULL')? 
	{
		// Create return CST Node
		Node fkReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		fkReturnNode.setKind("fk");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		fkReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			fkReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		fkReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		fkReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($column_listGen != null) {
	        for(Iterator it = $column_listGen.iterator(); it.hasNext(); )  { 
	            DDLParser.column_list_return r = (DDLParser.column_list_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("column_list");
	            	fkReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		fkReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		fkReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a CST Node
		if($schema_referencesGen != null) {
	        for(Iterator it = $schema_referencesGen.iterator(); it.hasNext(); )  { 
	            DDLParser.schema_references_return r = (DDLParser.schema_references_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("schema_references");
	            	fkReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		fkReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a CST Node
		if($table_referencesGen != null) {
	        for(Iterator it = $table_referencesGen.iterator(); it.hasNext(); )  { 
	            DDLParser.table_references_return r = (DDLParser.table_references_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("table_references");
	            	fkReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		fkReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a CST Node
		if($references_column_listGen != null) {
	        for(Iterator it = $references_column_listGen.iterator(); it.hasNext(); )  { 
	            DDLParser.references_column_list_return r = (DDLParser.references_column_list_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("references_column_list");
	            	fkReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		fkReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		fkReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		fkReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		fkReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		fkReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		fkReturnNode.getChildren().add(TK_12Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_13 != null) {
			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_13.text, TK_13.getCharPositionInLine(), TK_13.getLine());
	 		fkReturnNode.getChildren().add(TK_13Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_14 != null) {
			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_14.text, TK_14.getCharPositionInLine(), TK_14.getLine());
	 		fkReturnNode.getChildren().add(TK_14Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_15 != null) {
			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_15.text, TK_15.getCharPositionInLine(), TK_15.getLine());
	 		fkReturnNode.getChildren().add(TK_15Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$fk.returnNode = fkReturnNode;
	}
	;

pk returns [Node returnNode] 
:	 TK_0='CONSTRAINT'  IDGen=ID  TK_1='PRIMARY KEY'  TK_2='(' ( column_listGen+=column_list)*  TK_3=')' 
	{
		// Create return CST Node
		Node pkReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		pkReturnNode.setKind("pk");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		pkReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			pkReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		pkReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		pkReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($column_listGen != null) {
	        for(Iterator it = $column_listGen.iterator(); it.hasNext(); )  { 
	            DDLParser.column_list_return r = (DDLParser.column_list_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("column_list");
	            	pkReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		pkReturnNode.getChildren().add(TK_3Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$pk.returnNode = pkReturnNode;
	}
	;
	
ck returns [Node returnNode] 
:	 TK_0='CONSTRAINT'  IDGen=ID  TK_1='UNIQUE'  TK_2='(' ( column_listGen+=column_list)*  TK_3=')' 
	{
		// Create return CST Node
		Node ckReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		ckReturnNode.setKind("ck");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		ckReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			ckReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		ckReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		ckReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($column_listGen != null) {
	        for(Iterator it = $column_listGen.iterator(); it.hasNext(); )  { 
	            DDLParser.column_list_return r = (DDLParser.column_list_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("column_list");
	            	ckReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		ckReturnNode.getChildren().add(TK_3Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$ck.returnNode = ckReturnNode;
	}
	;

column_chec returns [Node returnNode] 
:	 IDGen=ID 
	{
		// Create return CST Node
		Node column_checReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		column_checReturnNode.setKind("column_chec");
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			column_checReturnNode.getChildren().add(IDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$column_chec.returnNode = column_checReturnNode;
	}
	;

schema_references returns [Node returnNode] 
:	 IDGen=ID 
	{
		// Create return CST Node
		Node schema_referencesReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		schema_referencesReturnNode.setKind("schema_references");
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			schema_referencesReturnNode.getChildren().add(IDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$schema_references.returnNode = schema_referencesReturnNode;
	}
	;

table_references returns [Node returnNode] 
:	 IDGen=ID 
	{
		// Create return CST Node
		Node table_referencesReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		table_referencesReturnNode.setKind("table_references");
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			table_referencesReturnNode.getChildren().add(IDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$table_references.returnNode = table_referencesReturnNode;
	}
	;

name_constraint returns [Node returnNode] 
:	 IDGen=ID 
	{
		// Create return CST Node
		Node name_constraintReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		name_constraintReturnNode.setKind("name_constraint");
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			name_constraintReturnNode.getChildren().add(IDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$name_constraint.returnNode = name_constraintReturnNode;
	}
	;

references_column_list returns [Node returnNode] 
:	 IDGen=ID ( TK_0=',')? 
	{
		// Create return CST Node
		Node references_column_listReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		references_column_listReturnNode.setKind("references_column_list");
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			references_column_listReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		references_column_listReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$references_column_list.returnNode = references_column_listReturnNode;
	}
	;

value_list returns [Node returnNode] 
:	 CVALUEGen=CVALUE ( TK_0=',')? 
	{
		// Create return CST Node
		Node value_listReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		value_listReturnNode.setKind("value_list");
	    // Create a CST Leaf
		if($CVALUEGen != null) {
			Leaf CVALUEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("CVALUE", $CVALUEGen.text, CVALUEGen.getCharPositionInLine(), CVALUEGen.getLine());
			value_listReturnNode.getChildren().add(CVALUEGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		value_listReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$value_list.returnNode = value_listReturnNode;
	}
	;

column_list returns [Node returnNode] 
:	 IDGen=ID ( TK_0=',')? 
	{
		// Create return CST Node
		Node column_listReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		column_listReturnNode.setKind("column_list");
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			column_listReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		column_listReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$column_list.returnNode = column_listReturnNode;
	}
	;

database returns [Node returnNode] 
:	 TK_0='CREATE' ( TK_1='DATABASE' |  TK_2='SCHEMA') ( TK_3='IF NOT EXISTS')?  IDGen=ID ( specificationGen+=specification)?  TK_4=';' 
	{
		// Create return CST Node
		Node databaseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		databaseReturnNode.setKind("database");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		databaseReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		databaseReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		databaseReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		databaseReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			databaseReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a CST Node
		if($specificationGen != null) {
	        for(Iterator it = $specificationGen.iterator(); it.hasNext(); )  { 
	            DDLParser.specification_return r = (DDLParser.specification_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("specification");
	            	databaseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		databaseReturnNode.getChildren().add(TK_4Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$database.returnNode = databaseReturnNode;
	}
	;

specification returns [Node returnNode] 
:	( TK_0='DEFAULT')?  TK_1='CHARACTER'  TK_2='SET' ( COMPARATORGen=COMPARATOR)?  IDGen=ID 
	{
		// Create return CST Node
		Node specificationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		specificationReturnNode.setKind("specification");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		specificationReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		specificationReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		specificationReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($COMPARATORGen != null) {
			Leaf COMPARATORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("COMPARATOR", $COMPARATORGen.text, COMPARATORGen.getCharPositionInLine(), COMPARATORGen.getLine());
			specificationReturnNode.getChildren().add(COMPARATORGenLeaf);
		}
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			specificationReturnNode.getChildren().add(IDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$specification.returnNode = specificationReturnNode;
	}
  	|	( TK_0='DEFAULT')?  TK_1='COLLATE' ( COMPARATORGen=COMPARATOR)?  IDGen=ID 
	{
		// Create return CST Node
		Node specificationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		specificationReturnNode.setKind("specification");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		specificationReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		specificationReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($COMPARATORGen != null) {
			Leaf COMPARATORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("COMPARATOR", $COMPARATORGen.text, COMPARATORGen.getCharPositionInLine(), COMPARATORGen.getLine());
			specificationReturnNode.getChildren().add(COMPARATORGenLeaf);
		}
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			specificationReturnNode.getChildren().add(IDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$specification.returnNode = specificationReturnNode;
	}
  	;

log_expresion returns [Node returnNode] 
: 	 column_checGen+=column_chec ( COMPARATORGen=COMPARATOR ( NUMBERGen=NUMBER |  CVALUEGen=CVALUE)  LOG_CONJGen=LOG_CONJ? |  TK_0='IN'  TK_1='(' ( value_listGen+=value_list)*  TK_2=')') 
	{
		// Create return CST Node
		Node log_expresionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		log_expresionReturnNode.setKind("log_expresion");
	    // Create a CST Node
		if($column_checGen != null) {
	        for(Iterator it = $column_checGen.iterator(); it.hasNext(); )  { 
	            DDLParser.column_chec_return r = (DDLParser.column_chec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("column_chec");
	            	log_expresionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($COMPARATORGen != null) {
			Leaf COMPARATORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("COMPARATOR", $COMPARATORGen.text, COMPARATORGen.getCharPositionInLine(), COMPARATORGen.getLine());
			log_expresionReturnNode.getChildren().add(COMPARATORGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			log_expresionReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($CVALUEGen != null) {
			Leaf CVALUEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("CVALUE", $CVALUEGen.text, CVALUEGen.getCharPositionInLine(), CVALUEGen.getLine());
			log_expresionReturnNode.getChildren().add(CVALUEGenLeaf);
		}
	    // Create a CST Leaf
		if($LOG_CONJGen != null) {
			Leaf LOG_CONJGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LOG_CONJ", $LOG_CONJGen.text, LOG_CONJGen.getCharPositionInLine(), LOG_CONJGen.getLine());
			log_expresionReturnNode.getChildren().add(LOG_CONJGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		log_expresionReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		log_expresionReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($value_listGen != null) {
	        for(Iterator it = $value_listGen.iterator(); it.hasNext(); )  { 
	            DDLParser.value_list_return r = (DDLParser.value_list_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("value_list");
	            	log_expresionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		log_expresionReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$log_expresion.returnNode = log_expresionReturnNode;
	}
	;

data_type returns [Node returnNode] 
:	 character_string_typeGen+=character_string_type 
	{
		// Create return CST Node
		Node data_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		data_typeReturnNode.setKind("data_type");
	    // Create a CST Node
		if($character_string_typeGen != null) {
	        for(Iterator it = $character_string_typeGen.iterator(); it.hasNext(); )  { 
	            DDLParser.character_string_type_return r = (DDLParser.character_string_type_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("character_string_type");
	            	data_typeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$data_type.returnNode = data_typeReturnNode;
	}
	|	 national_character_string_typeGen+=national_character_string_type 
	{
		// Create return CST Node
		Node data_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		data_typeReturnNode.setKind("data_type");
	    // Create a CST Node
		if($national_character_string_typeGen != null) {
	        for(Iterator it = $national_character_string_typeGen.iterator(); it.hasNext(); )  { 
	            DDLParser.national_character_string_type_return r = (DDLParser.national_character_string_type_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("national_character_string_type");
	            	data_typeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$data_type.returnNode = data_typeReturnNode;
	}
	|	 bit_string_typeGen+=bit_string_type 
	{
		// Create return CST Node
		Node data_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		data_typeReturnNode.setKind("data_type");
	    // Create a CST Node
		if($bit_string_typeGen != null) {
	        for(Iterator it = $bit_string_typeGen.iterator(); it.hasNext(); )  { 
	            DDLParser.bit_string_type_return r = (DDLParser.bit_string_type_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("bit_string_type");
	            	data_typeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$data_type.returnNode = data_typeReturnNode;
	}
	|	 numeric_typeGen+=numeric_type 
	{
		// Create return CST Node
		Node data_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		data_typeReturnNode.setKind("data_type");
	    // Create a CST Node
		if($numeric_typeGen != null) {
	        for(Iterator it = $numeric_typeGen.iterator(); it.hasNext(); )  { 
	            DDLParser.numeric_type_return r = (DDLParser.numeric_type_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("numeric_type");
	            	data_typeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$data_type.returnNode = data_typeReturnNode;
	}
	|	 datetime_typeGen+=datetime_type 
	{
		// Create return CST Node
		Node data_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		data_typeReturnNode.setKind("data_type");
	    // Create a CST Node
		if($datetime_typeGen != null) {
	        for(Iterator it = $datetime_typeGen.iterator(); it.hasNext(); )  { 
	            DDLParser.datetime_type_return r = (DDLParser.datetime_type_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("datetime_type");
	            	data_typeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$data_type.returnNode = data_typeReturnNode;
	}
	|	 interval_typeGen+=interval_type 
	{
		// Create return CST Node
		Node data_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		data_typeReturnNode.setKind("data_type");
	    // Create a CST Node
		if($interval_typeGen != null) {
	        for(Iterator it = $interval_typeGen.iterator(); it.hasNext(); )  { 
	            DDLParser.interval_type_return r = (DDLParser.interval_type_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("interval_type");
	            	data_typeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$data_type.returnNode = data_typeReturnNode;
	}
	;

character_string_type returns [Node returnNode] 
:	 TK_0='CHARACTER' ( TK_1='('  NUMBERGen=NUMBER  TK_2=')')? 
	{
		// Create return CST Node
		Node character_string_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		character_string_typeReturnNode.setKind("character_string_type");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		character_string_typeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		character_string_typeReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			character_string_typeReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		character_string_typeReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$character_string_type.returnNode = character_string_typeReturnNode;
	}
	|	 TK_0='CHAR' ( TK_1='('  NUMBERGen=NUMBER  TK_2=')')? 
	{
		// Create return CST Node
		Node character_string_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		character_string_typeReturnNode.setKind("character_string_type");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		character_string_typeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		character_string_typeReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			character_string_typeReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		character_string_typeReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$character_string_type.returnNode = character_string_typeReturnNode;
	}
	|	 TK_0='CHARACTER VARYING'  TK_1='('  NUMBERGen=NUMBER  TK_2=')' 
	{
		// Create return CST Node
		Node character_string_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		character_string_typeReturnNode.setKind("character_string_type");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		character_string_typeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		character_string_typeReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			character_string_typeReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		character_string_typeReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$character_string_type.returnNode = character_string_typeReturnNode;
	}
	|	 TK_0='CHAR VARYING'  TK_1='('  NUMBERGen=NUMBER  TK_2=')' 
	{
		// Create return CST Node
		Node character_string_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		character_string_typeReturnNode.setKind("character_string_type");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		character_string_typeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		character_string_typeReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			character_string_typeReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		character_string_typeReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$character_string_type.returnNode = character_string_typeReturnNode;
	}
	|	 TK_0='VARCHAR'  TK_1='('  NUMBERGen=NUMBER  TK_2=')' 
	{
		// Create return CST Node
		Node character_string_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		character_string_typeReturnNode.setKind("character_string_type");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		character_string_typeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		character_string_typeReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			character_string_typeReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		character_string_typeReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$character_string_type.returnNode = character_string_typeReturnNode;
	}
	;
	
national_character_string_type returns [Node returnNode] 
:	 TK_0='NATIONAL CHARACTER' ( TK_1='('  NUMBERGen=NUMBER  TK_2=')')? 
	{
		// Create return CST Node
		Node national_character_string_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		national_character_string_typeReturnNode.setKind("national_character_string_type");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		national_character_string_typeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		national_character_string_typeReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			national_character_string_typeReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		national_character_string_typeReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$national_character_string_type.returnNode = national_character_string_typeReturnNode;
	}
	|	 TK_0='NATIONAL CHAR' ( TK_1='('  NUMBERGen=NUMBER  TK_2=')')? 
	{
		// Create return CST Node
		Node national_character_string_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		national_character_string_typeReturnNode.setKind("national_character_string_type");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		national_character_string_typeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		national_character_string_typeReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			national_character_string_typeReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		national_character_string_typeReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$national_character_string_type.returnNode = national_character_string_typeReturnNode;
	}
	|	 TK_0='NCHAR' ( TK_1='('  NUMBERGen=NUMBER  TK_2=')')? 
	{
		// Create return CST Node
		Node national_character_string_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		national_character_string_typeReturnNode.setKind("national_character_string_type");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		national_character_string_typeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		national_character_string_typeReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			national_character_string_typeReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		national_character_string_typeReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$national_character_string_type.returnNode = national_character_string_typeReturnNode;
	}
	|	 TK_0='NATIONAL CHARACTER VARYING'  TK_1='('  NUMBERGen=NUMBER  TK_2=')' 
	{
		// Create return CST Node
		Node national_character_string_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		national_character_string_typeReturnNode.setKind("national_character_string_type");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		national_character_string_typeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		national_character_string_typeReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			national_character_string_typeReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		national_character_string_typeReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$national_character_string_type.returnNode = national_character_string_typeReturnNode;
	}
	|	 TK_0='NATIONAL CHAR VARYING'  TK_1='('  NUMBERGen=NUMBER  TK_2=')' 
	{
		// Create return CST Node
		Node national_character_string_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		national_character_string_typeReturnNode.setKind("national_character_string_type");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		national_character_string_typeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		national_character_string_typeReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			national_character_string_typeReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		national_character_string_typeReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$national_character_string_type.returnNode = national_character_string_typeReturnNode;
	}
	|	 TK_0='NCHAR VARYING'  TK_1='('  NUMBERGen=NUMBER  TK_2=')' 
	{
		// Create return CST Node
		Node national_character_string_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		national_character_string_typeReturnNode.setKind("national_character_string_type");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		national_character_string_typeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		national_character_string_typeReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			national_character_string_typeReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		national_character_string_typeReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$national_character_string_type.returnNode = national_character_string_typeReturnNode;
	}
	;
	
bit_string_type returns [Node returnNode] 
:	 TK_0='BIT' ( TK_1='('  NUMBERGen=NUMBER  TK_2=')')? 
	{
		// Create return CST Node
		Node bit_string_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		bit_string_typeReturnNode.setKind("bit_string_type");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		bit_string_typeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		bit_string_typeReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			bit_string_typeReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		bit_string_typeReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$bit_string_type.returnNode = bit_string_typeReturnNode;
	}
	|	 TK_0='BIT VARYING'  TK_1='('  NUMBERGen=NUMBER  TK_2=')' 
	{
		// Create return CST Node
		Node bit_string_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		bit_string_typeReturnNode.setKind("bit_string_type");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		bit_string_typeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		bit_string_typeReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			bit_string_typeReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		bit_string_typeReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$bit_string_type.returnNode = bit_string_typeReturnNode;
	}
	;

numeric_type returns [Node returnNode] 
:	 exact_numeric_typeGen+=exact_numeric_type 
	{
		// Create return CST Node
		Node numeric_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		numeric_typeReturnNode.setKind("numeric_type");
	    // Create a CST Node
		if($exact_numeric_typeGen != null) {
	        for(Iterator it = $exact_numeric_typeGen.iterator(); it.hasNext(); )  { 
	            DDLParser.exact_numeric_type_return r = (DDLParser.exact_numeric_type_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("exact_numeric_type");
	            	numeric_typeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$numeric_type.returnNode = numeric_typeReturnNode;
	}
	|	 approximate_numeric_typeGen+=approximate_numeric_type 
	{
		// Create return CST Node
		Node numeric_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		numeric_typeReturnNode.setKind("numeric_type");
	    // Create a CST Node
		if($approximate_numeric_typeGen != null) {
	        for(Iterator it = $approximate_numeric_typeGen.iterator(); it.hasNext(); )  { 
	            DDLParser.approximate_numeric_type_return r = (DDLParser.approximate_numeric_type_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("approximate_numeric_type");
	            	numeric_typeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$numeric_type.returnNode = numeric_typeReturnNode;
	}
	;
	
exact_numeric_type returns [Node returnNode] 
:	 TK_0='NUMERIC' ( TK_1='('  NUMBERGen=NUMBER ( TK_2=','  NUMBERGen_1=NUMBER)?  TK_3=')')? 
	{
		// Create return CST Node
		Node exact_numeric_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		exact_numeric_typeReturnNode.setKind("exact_numeric_type");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		exact_numeric_typeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		exact_numeric_typeReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			exact_numeric_typeReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		exact_numeric_typeReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen_1 != null) {
			Leaf NUMBERGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen_1.text, NUMBERGen_1.getCharPositionInLine(), NUMBERGen_1.getLine());
			exact_numeric_typeReturnNode.getChildren().add(NUMBERGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		exact_numeric_typeReturnNode.getChildren().add(TK_3Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$exact_numeric_type.returnNode = exact_numeric_typeReturnNode;
	}
	|	 TK_0='DECIMAL' ( TK_1='('  NUMBERGen=NUMBER ( TK_2=','  NUMBERGen_1=NUMBER)?  TK_3=')')? 
	{
		// Create return CST Node
		Node exact_numeric_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		exact_numeric_typeReturnNode.setKind("exact_numeric_type");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		exact_numeric_typeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		exact_numeric_typeReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			exact_numeric_typeReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		exact_numeric_typeReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen_1 != null) {
			Leaf NUMBERGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen_1.text, NUMBERGen_1.getCharPositionInLine(), NUMBERGen_1.getLine());
			exact_numeric_typeReturnNode.getChildren().add(NUMBERGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		exact_numeric_typeReturnNode.getChildren().add(TK_3Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$exact_numeric_type.returnNode = exact_numeric_typeReturnNode;
	}
	|	 TK_0='DEC' ( TK_1='('  NUMBERGen=NUMBER ( TK_2=','  NUMBERGen_1=NUMBER)?  TK_3=')')? 
	{
		// Create return CST Node
		Node exact_numeric_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		exact_numeric_typeReturnNode.setKind("exact_numeric_type");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		exact_numeric_typeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		exact_numeric_typeReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			exact_numeric_typeReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		exact_numeric_typeReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen_1 != null) {
			Leaf NUMBERGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen_1.text, NUMBERGen_1.getCharPositionInLine(), NUMBERGen_1.getLine());
			exact_numeric_typeReturnNode.getChildren().add(NUMBERGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		exact_numeric_typeReturnNode.getChildren().add(TK_3Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$exact_numeric_type.returnNode = exact_numeric_typeReturnNode;
	}
	|	 TK_0='INTEGER' 
	{
		// Create return CST Node
		Node exact_numeric_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		exact_numeric_typeReturnNode.setKind("exact_numeric_type");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		exact_numeric_typeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$exact_numeric_type.returnNode = exact_numeric_typeReturnNode;
	}
	|	 TK_0='INT' 
	{
		// Create return CST Node
		Node exact_numeric_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		exact_numeric_typeReturnNode.setKind("exact_numeric_type");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		exact_numeric_typeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$exact_numeric_type.returnNode = exact_numeric_typeReturnNode;
	}
	|	 TK_0='SMALLINT' 
	{
		// Create return CST Node
		Node exact_numeric_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		exact_numeric_typeReturnNode.setKind("exact_numeric_type");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		exact_numeric_typeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$exact_numeric_type.returnNode = exact_numeric_typeReturnNode;
	}
	;
	
approximate_numeric_type returns [Node returnNode] 
:	 TK_0='FLOAT' ( TK_1='('  NUMBERGen=NUMBER  TK_2=')')? 
	{
		// Create return CST Node
		Node approximate_numeric_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		approximate_numeric_typeReturnNode.setKind("approximate_numeric_type");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		approximate_numeric_typeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		approximate_numeric_typeReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			approximate_numeric_typeReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		approximate_numeric_typeReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$approximate_numeric_type.returnNode = approximate_numeric_typeReturnNode;
	}
	|	 TK_0='REAL' 
	{
		// Create return CST Node
		Node approximate_numeric_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		approximate_numeric_typeReturnNode.setKind("approximate_numeric_type");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		approximate_numeric_typeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$approximate_numeric_type.returnNode = approximate_numeric_typeReturnNode;
	}
	|	 TK_0='DOUBLE PRECISION' 
	{
		// Create return CST Node
		Node approximate_numeric_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		approximate_numeric_typeReturnNode.setKind("approximate_numeric_type");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		approximate_numeric_typeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$approximate_numeric_type.returnNode = approximate_numeric_typeReturnNode;
	}
	;
	
datetime_type returns [Node returnNode] 
:	 TK_0='DATE' 
	{
		// Create return CST Node
		Node datetime_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		datetime_typeReturnNode.setKind("datetime_type");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		datetime_typeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$datetime_type.returnNode = datetime_typeReturnNode;
	}
	|	 TK_0='TIME' ( TK_1='('  NUMBERGen=NUMBER  TK_2=')')? ( TK_3='WITH TIME ZONE')? 
	{
		// Create return CST Node
		Node datetime_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		datetime_typeReturnNode.setKind("datetime_type");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		datetime_typeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		datetime_typeReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			datetime_typeReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		datetime_typeReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		datetime_typeReturnNode.getChildren().add(TK_3Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$datetime_type.returnNode = datetime_typeReturnNode;
	}
	|	 TK_0='TIMESTAMP' ( TK_1='('  NUMBERGen=NUMBER  TK_2=')')? ( TK_3='WITH TIME ZONE')? 
	{
		// Create return CST Node
		Node datetime_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		datetime_typeReturnNode.setKind("datetime_type");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		datetime_typeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		datetime_typeReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			datetime_typeReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		datetime_typeReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		datetime_typeReturnNode.getChildren().add(TK_3Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$datetime_type.returnNode = datetime_typeReturnNode;
	}
	;
	
interval_type returns [Node returnNode] 
:	 TK_0='INTERVAL'  interval_qualifierGen+=interval_qualifier 
	{
		// Create return CST Node
		Node interval_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		interval_typeReturnNode.setKind("interval_type");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		interval_typeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($interval_qualifierGen != null) {
	        for(Iterator it = $interval_qualifierGen.iterator(); it.hasNext(); )  { 
	            DDLParser.interval_qualifier_return r = (DDLParser.interval_qualifier_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("interval_qualifier");
	            	interval_typeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$interval_type.returnNode = interval_typeReturnNode;
	}
	;
	
interval_qualifier returns [Node returnNode] 
:	 start_fieldGen+=start_field  TK_0='TO'  end_fieldGen+=end_field 
	{
		// Create return CST Node
		Node interval_qualifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		interval_qualifierReturnNode.setKind("interval_qualifier");
	    // Create a CST Node
		if($start_fieldGen != null) {
	        for(Iterator it = $start_fieldGen.iterator(); it.hasNext(); )  { 
	            DDLParser.start_field_return r = (DDLParser.start_field_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("start_field");
	            	interval_qualifierReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		interval_qualifierReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($end_fieldGen != null) {
	        for(Iterator it = $end_fieldGen.iterator(); it.hasNext(); )  { 
	            DDLParser.end_field_return r = (DDLParser.end_field_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("end_field");
	            	interval_qualifierReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$interval_qualifier.returnNode = interval_qualifierReturnNode;
	}
	|	 single_datetime_fieldGen+=single_datetime_field 
	{
		// Create return CST Node
		Node interval_qualifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		interval_qualifierReturnNode.setKind("interval_qualifier");
	    // Create a CST Node
		if($single_datetime_fieldGen != null) {
	        for(Iterator it = $single_datetime_fieldGen.iterator(); it.hasNext(); )  { 
	            DDLParser.single_datetime_field_return r = (DDLParser.single_datetime_field_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("single_datetime_field");
	            	interval_qualifierReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$interval_qualifier.returnNode = interval_qualifierReturnNode;
	}
	;

start_field returns [Node returnNode] 
:	 NON_SECOND_DATETIME_FIELDGen=NON_SECOND_DATETIME_FIELD ( TK_0='('  NUMBERGen=NUMBER  TK_1=')')? 
	{
		// Create return CST Node
		Node start_fieldReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		start_fieldReturnNode.setKind("start_field");
	    // Create a CST Leaf
		if($NON_SECOND_DATETIME_FIELDGen != null) {
			Leaf NON_SECOND_DATETIME_FIELDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NON_SECOND_DATETIME_FIELD", $NON_SECOND_DATETIME_FIELDGen.text, NON_SECOND_DATETIME_FIELDGen.getCharPositionInLine(), NON_SECOND_DATETIME_FIELDGen.getLine());
			start_fieldReturnNode.getChildren().add(NON_SECOND_DATETIME_FIELDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		start_fieldReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			start_fieldReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		start_fieldReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$start_field.returnNode = start_fieldReturnNode;
	}
	;
	
end_field returns [Node returnNode] 
:	 NON_SECOND_DATETIME_FIELDGen=NON_SECOND_DATETIME_FIELD 
	{
		// Create return CST Node
		Node end_fieldReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		end_fieldReturnNode.setKind("end_field");
	    // Create a CST Leaf
		if($NON_SECOND_DATETIME_FIELDGen != null) {
			Leaf NON_SECOND_DATETIME_FIELDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NON_SECOND_DATETIME_FIELD", $NON_SECOND_DATETIME_FIELDGen.text, NON_SECOND_DATETIME_FIELDGen.getCharPositionInLine(), NON_SECOND_DATETIME_FIELDGen.getLine());
			end_fieldReturnNode.getChildren().add(NON_SECOND_DATETIME_FIELDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$end_field.returnNode = end_fieldReturnNode;
	} |  TK_0='SECOND' ( TK_1='('  NUMBERGen=NUMBER  TK_2=')')? 
	{
		// Create return CST Node
		Node end_fieldReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		end_fieldReturnNode.setKind("end_field");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		end_fieldReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		end_fieldReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			end_fieldReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		end_fieldReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$end_field.returnNode = end_fieldReturnNode;
	}
	;

single_datetime_field returns [Node returnNode] 
:	 NON_SECOND_DATETIME_FIELDGen=NON_SECOND_DATETIME_FIELD ( TK_0='('  NUMBERGen=NUMBER  TK_1=')')? 
	{
		// Create return CST Node
		Node single_datetime_fieldReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		single_datetime_fieldReturnNode.setKind("single_datetime_field");
	    // Create a CST Leaf
		if($NON_SECOND_DATETIME_FIELDGen != null) {
			Leaf NON_SECOND_DATETIME_FIELDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NON_SECOND_DATETIME_FIELD", $NON_SECOND_DATETIME_FIELDGen.text, NON_SECOND_DATETIME_FIELDGen.getCharPositionInLine(), NON_SECOND_DATETIME_FIELDGen.getLine());
			single_datetime_fieldReturnNode.getChildren().add(NON_SECOND_DATETIME_FIELDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		single_datetime_fieldReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			single_datetime_fieldReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		single_datetime_fieldReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$single_datetime_field.returnNode = single_datetime_fieldReturnNode;
	}
	|	 TK_0='SECOND' ( TK_1='('  NUMBERGen=NUMBER ( TK_2=','  NUMBERGen_1=NUMBER)?  TK_3=')')? 
	{
		// Create return CST Node
		Node single_datetime_fieldReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		single_datetime_fieldReturnNode.setKind("single_datetime_field");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		single_datetime_fieldReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		single_datetime_fieldReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			single_datetime_fieldReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		single_datetime_fieldReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen_1 != null) {
			Leaf NUMBERGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen_1.text, NUMBERGen_1.getCharPositionInLine(), NUMBERGen_1.getLine());
			single_datetime_fieldReturnNode.getChildren().add(NUMBERGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		single_datetime_fieldReturnNode.getChildren().add(TK_3Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$single_datetime_field.returnNode = single_datetime_fieldReturnNode;
	}
	;
	
NON_SECOND_DATETIME_FIELD
	:	'YEAR' | 'MONTH' | 'DAY' | 'HOUR' | 'MINUTE'
	;


SQUOTE					: '\u0027';
CVALUE					: SQUOTE ( options {greedy=false;} : . )* SQUOTE;
NUMBER					: ('0'..'9' | '.')*;
COMPARATOR				:  '<>' | '>=' | '<=' | '=' | '>' | '<';
LOG_CONJ				: 'OR' | 'AND';
ID 						: ('a'..'z' | 'A'..'Z') ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | '$' | '#' | '-' )*;
WS 						: (' ' | '\t' | '\n' | '\r')+ {$channel=HIDDEN;};
ML_COMMENT:
	'/*' (options {greedy=false;} : .)* '*/' (';')? { $channel=HIDDEN;}
	;
	
OL_COMMENT: '--' ( options {greedy=false;} : . )* '\n'+ { $channel=HIDDEN;}
	;