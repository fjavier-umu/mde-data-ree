grammar DML; 

// Autogenerated options
options {
	output=template;
}




// Autogenerated import
@header {
	import gts.modernization.model.CST.impl.*;
	import gts.modernization.model.CST.*;
	import java.util.Iterator;
}

// Rules
insertsStatements returns [Node returnNode] 
:	(insertIntoGen+=insertInto)* 
	{
		// Create return CST Node
		Node insertsStatementsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		insertsStatementsReturnNode.setKind("insertsStatements");
	    // Create a CST Node
		if($insertIntoGen != null) {
	        for(Iterator it = $insertIntoGen.iterator(); it.hasNext(); )  { 
	            DMLParser.insertInto_return r = (DMLParser.insertInto_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("insertInto");
	            	insertsStatementsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$insertsStatements.returnNode = insertsStatementsReturnNode;
	}
	;

insertInto returns [Node returnNode] 
:	TK_0='INSERT INTO' IDGen=ID (TK_1='(')? (columnGen+=column)* (TK_2=')')? TK_3='VALUES' registryGen+=registry TK_4=';' 
	{
		// Create return CST Node
		Node insertIntoReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		insertIntoReturnNode.setKind("insertInto");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		insertIntoReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IDGenLeaf.setKind("ID");
			IDGenLeaf.setValue($IDGen.text);
			IDGenLeaf.setPos(IDGen.getCharPositionInLine());
			IDGenLeaf.setLine(IDGen.getLine());
			insertIntoReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		insertIntoReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($columnGen != null) {
	        for(Iterator it = $columnGen.iterator(); it.hasNext(); )  { 
	            DMLParser.column_return r = (DMLParser.column_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("column");
	            	insertIntoReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		insertIntoReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		insertIntoReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Node
		if($registryGen != null) {
	        for(Iterator it = $registryGen.iterator(); it.hasNext(); )  { 
	            DMLParser.registry_return r = (DMLParser.registry_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("registry");
	            	insertIntoReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_4Leaf.setKind("TOKEN");
	 		TK_4Leaf.setValue($TK_4.text);
			TK_4Leaf.setPos(TK_4.getCharPositionInLine());
			TK_4Leaf.setLine(TK_4.getLine());
	 		insertIntoReturnNode.getChildren().add(TK_4Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$insertInto.returnNode = insertIntoReturnNode;
	} 
	;

registry returns [Node returnNode] 
:	TK_0='(' (valueGen+=value)+ TK_1=')' 
	{
		// Create return CST Node
		Node registryReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		registryReturnNode.setKind("registry");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		registryReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($valueGen != null) {
	        for(Iterator it = $valueGen.iterator(); it.hasNext(); )  { 
	            DMLParser.value_return r = (DMLParser.value_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("value");
	            	registryReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		registryReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$registry.returnNode = registryReturnNode;
	}
	;

value returns [Node returnNode] 
:	(IDGen=ID | CVALUEGen=CVALUE | NUMBERGen=NUMBER) (TK_0=',')? 
	{
		// Create return CST Node
		Node valueReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		valueReturnNode.setKind("value");
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IDGenLeaf.setKind("ID");
			IDGenLeaf.setValue($IDGen.text);
			IDGenLeaf.setPos(IDGen.getCharPositionInLine());
			IDGenLeaf.setLine(IDGen.getLine());
			valueReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a CST Leaf
		if($CVALUEGen != null) {
			Leaf CVALUEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			CVALUEGenLeaf.setKind("CVALUE");
			CVALUEGenLeaf.setValue($CVALUEGen.text);
			CVALUEGenLeaf.setPos(CVALUEGen.getCharPositionInLine());
			CVALUEGenLeaf.setLine(CVALUEGen.getLine());
			valueReturnNode.getChildren().add(CVALUEGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			NUMBERGenLeaf.setKind("NUMBER");
			NUMBERGenLeaf.setValue($NUMBERGen.text);
			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
			valueReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		valueReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$value.returnNode = valueReturnNode;
	}
	;

column returns [Node returnNode] 
:	IDGen=ID (TK_0=',')? 
	{
		// Create return CST Node
		Node columnReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		columnReturnNode.setKind("column");
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IDGenLeaf.setKind("ID");
			IDGenLeaf.setValue($IDGen.text);
			IDGenLeaf.setPos(IDGen.getCharPositionInLine());
			IDGenLeaf.setLine(IDGen.getLine());
			columnReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		columnReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$column.returnNode = columnReturnNode;
	}
	;

NUMBER
	:	('0'..'9' | '.')*
	;

ID
	:	('a'..'z' | 'A'..'Z') ('a'..'z' | 'A'..'Z' | '0'..'9' | '_' | '$' | '#' | '-' | '@' | '.')*
	;

SQUOTE
	:	'\u0027'
	;

CVALUE
	:	SQUOTE ( options {greedy=false;} : . )* SQUOTE
	;

WS
	:	( ' ' | '\t' | '\n' | '\r' )+ {$channel=HIDDEN;}
	;
