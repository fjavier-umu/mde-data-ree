<?xml version="1.0" encoding="UTF-8"?>
<!-- Author: Javier Luis CÃ¡novas Izquierdo 
     Version: 0.3 
     Description: This build file incorporates the target for supporting extensions
-->
<project name="G2Ge" default="build">

	<!-- GENERAL PROPERTIES -->
	<!-- Binaries directory -->
    <property name="binDir" value="files/bin"/>
	<!-- Generated files directory -->
    <property name="genDir" value="files/gen"/>
	<!-- Source files directory -->
    <property name="srcDir" value="files/src"/>
	<!-- Extension files directory -->
    <property name="extDir" value="files/extensions"/>
	<!-- Metamodels directory -->
    <property name="metamodelsDir" value="files/metamodels"/>
	<!-- Templates directory -->
    <property name="templatesDir" value="templates"/>
	<!-- Extensions directory -->
    <property name="extensionsDir" value="files/extensions"/>
	
	<!-- PROPERTIES TO CONVERG G INTO Ge -->
	<!-- Original grammar -->
    <property name="grammar" value="${srcDir}/DDL.g3"/>
	<!-- Enriched grammar -->
    <property name="grammarE" value="${genDir}/DDL.ge3"/>
	<!-- Template used to enrich the grammar (dont change) -->
    <property name="templates" value="${templatesDir}/G2Ge.stg"/>

	<!-- ANTLR OPTIONS TO CONVERT Ge INTO Parser --> 
	<property name="multithreaded" value="true" /> 
	<property name="report" value="false" /> 
	<property name="depend" value="true" /> 
	<property name="profile" value="false" /> 
	<property name="lib" location="lib" />
	<property name="output.antlr" location="${genDir}" /> 
	
	<!-- PROPERTIES TO COMPILE THE GENERATED Java code -->
    <property name="javasrc" value="${genDir}"/>
    <property name="javaDestDir" value="${binDir}"/>
	
	<!-- PROPERTIES TO THE INTERPRETER -->
	<!-- Name of the grammar -->
    <property name="grammarName" value="DDL"/>
	<!-- Name of the main rule of the grammar -->
    <property name="grammarMainRule" value="data_definition"/>
	<!-- Gra2MoL definition -->
    <property name="sourceView" value="${srcDir}/extractDDL.g2m"/>
	<!-- Path to target metamodel -->
    <property name="pathMetamodel" value="${metamodelsDir}/DDL.ecore"/>
	<!-- Name of the target metamodel -->
    <property name="targetMetamodel" value="DDL"/>
	<!-- Path to result target model -->
    <property name="resultInterpreter" value="DDL.xmi"/>

    <path id="path.taskdef">
    	<pathelement location="./lib/antlr-2.7.7.jar"/>
    	<pathelement location="./lib/antlr-3.0.1.jar"/>
    	<pathelement location="./lib/antlr-runtime-3.0.1.jar"/>
    	<pathelement location="./lib/antlr3-antTask.jar"/>
    	<pathelement location="./lib/stringtemplate-3.1b1.jar"/>
    	<pathelement location="./lib/org.eclipse.emf.common_2.3.0.v200706262000.jar"/>
        <pathelement location="./lib/org.eclipse.emf.ecore.xmi_2.3.0.v200706262000.jar"/>
    	<pathelement location="./lib/org.eclipse.emf.ecore_2.3.0.v200706262000.jar"/>
     	<pathelement location="./lib/gts.modernization.grammar2Model.antTasks.jar"/>
     	<pathelement location="./lib/gts.modernization.grammar2Model.jar"/>
     	<pathelement location="./lib/org.eclipse.gmt.modisco.jar"/>
     	<pathelement location="${binDir}/."/>
   	</path>
		
	<target name="checkEGrammarExists">
		<echo>Checking enriched grammar existence...</echo>
		<condition property="existsCondition">
	    	<available file="${grammarE}"/>
	    </condition>
	</target>

	<target name="checkDates" if="existsCondition">
		<echo>Checking enriched grammar date...</echo>
		<uptodate property="phaseOne.required" targetfile="${grammar}" srcfile="${grammarE}"/>
	</target>
	
	<target name="dontExist" unless="existsCondition">
		<echo>Enriched grammar does not exist</echo>
		<property name="phaseOne.required" value="true"/>
	</target>
	
	<target name="phaseOne" depends="checkDates, dontExist" if="phaseOne.required"
		description="This first phase enrich the grammar with semantic actions to create the CSTs. Next it creates
		the parser with ANTLR tool and compiles it. Finally, the generated parser is fixed.">

		<!-- PHASE ONE -->
		<echo>Executing Phase 1</echo>
		<mkdir dir="${binDir}"/>
		<mkdir dir="${genDir}"/>
		<!-- The grammar is enriched -->
		<taskdef name="G2Ge" classname="gts.modernization.util.G2GeAntTask" classpathref="path.taskdef"/>
			<G2Ge 
				pathGrammar="${grammar}" 
				pathResult="${grammarE}" 
				pathTemplates="${templates}"
		/>
		
		<!-- The parser is built -->
		<mkdir dir="${output.antlr}"/>
		<taskdef name="antlr3" classname="org.apache.tools.ant.antlr.ANTLR3" classpathref="path.taskdef"/>
		<antlr3 xmlns:antlr="antlib:org/apache/tools/ant/antlr" 
		 	target="${grammarE}" 
		 	outputdirectory="${output.antlr}" 
		 	libdirectory="${lib}" 
		 	multithreaded="${multithreaded}" 
		 	report="${report}" 
		 	depend="${depend}" 
		 	profile="${profile}">          
				<classpath>
					<path refid="path.taskdef" />
				</classpath>
		</antlr3>
		
		<!-- Bug fixed in created parser  -->
		<replace file="${output.antlr}/${grammarName}Parser.java" token=".getTemplate()" value=""/>
		
		<!-- The created parser is compiled -->
		<mkdir dir="${javaDestDir}"/>
		<javac srcdir="${javasrc}"
			destdir="${javaDestDir}"
		    debug="on"
		    source="1.6">
			<classpath>
				<path refid="path.taskdef" />
			</classpath>
		</javac>
	</target>

	
	<target name="phaseTwo"
		depends="phaseOne"
		description="This second phase executes the interpreter of Gra2MoL">
				
		<!-- PHASE TWO -->
		<echo>Executing Phase 2</echo>
		<!-- Interpreter of Gra2MoL -->
		<taskdef name="Gra2MoLDinamicInterpreter" classname="gts.modernization.util.Gra2MoLDinamicInterpreterAntTask" classpathref="path.taskdef"/>
		<Gra2MoLDinamicInterpreter 
					pathSourceView="${sourceView}" 
					pathMetamodel="${pathMetamodel}"
					targetMetamodel="${targetMetamodel}"
					className="${grammarName}Test"
					result="${resultInterpreter}"
					grammar="${grammarName}" 
					mainRule="${grammarMainRule}" 
					caseSensitive="true">
			<!-- Filter the files to intepreter -->
			<fileset dir="${srcDir}" includes="*.sql"/>
		</Gra2MoLDinamicInterpreter>
	</target>
	

	<target name="checkExtensions">
		<echo>Checking extensions...</echo>
		<condition property="extensionsExist">
			<available file="${extDir}" type="dir"/>
		</condition>
	</target>
	
	<target name="yesExtension" if="extensionsExist">
		<echo>Extensions detected.</echo>
		<echo>Compiling extensions...</echo>
		<javac srcdir="${extensionsDir}"
			destdir="${javaDestDir}"
		    debug="on"
		    source="1.6">
			<classpath>
				<path refid="path.taskdef" />
			</classpath>
		</javac>
	</target>
	
	<target name="noExtension" unless="extensionsExist">
		<echo>Extensions not detected.</echo>
		<property name="compileExtensions.required" value="false"/>
	</target>
	
	<target name="build" depends="checkExtensions, yesExtension, noExtension, checkEGrammarExists, phaseOne, phaseTwo">
		<tstamp/>
	</target>	

	
	<target name="clean">
		<delete dir="${binDir}"/>
		<delete dir="${genDir}"/>
	</target>
</project>