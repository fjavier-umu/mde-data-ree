grammar DDL;

options {
	backtrack=true;

	output=template;
}  


// Autogenerated import
@header {
	import gts.modernization.model.CST.impl.*;
	import gts.modernization.model.CST.*;
	import java.util.Iterator;
}

// Rules
data_definition returns [Node returnNode] 
: 	(data_definition_statementGen+=data_definition_statement)* 
	{
		// Create return CST Node
		Node data_definitionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		data_definitionReturnNode.setKind("data_definition");
	    // Create a CST Node
		if($data_definition_statementGen != null) {
	        for(Iterator it = $data_definition_statementGen.iterator(); it.hasNext(); )  { 
	            DDLParser.data_definition_statement_return r = (DDLParser.data_definition_statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("data_definition_statement");
	            	data_definitionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$data_definition.returnNode = data_definitionReturnNode;
	}
	;
	
data_definition_statement returns [Node returnNode] 
: 	databaseGen+=database 
	{
		// Create return CST Node
		Node data_definition_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		data_definition_statementReturnNode.setKind("data_definition_statement");
	    // Create a CST Node
		if($databaseGen != null) {
	        for(Iterator it = $databaseGen.iterator(); it.hasNext(); )  { 
	            DDLParser.database_return r = (DDLParser.database_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("database");
	            	data_definition_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$data_definition_statement.returnNode = data_definition_statementReturnNode;
	}
	|	tableGen+=table 
	{
		// Create return CST Node
		Node data_definition_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		data_definition_statementReturnNode.setKind("data_definition_statement");
	    // Create a CST Node
		if($tableGen != null) {
	        for(Iterator it = $tableGen.iterator(); it.hasNext(); )  { 
	            DDLParser.table_return r = (DDLParser.table_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("table");
	            	data_definition_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$data_definition_statement.returnNode = data_definition_statementReturnNode;
	}
	|	comment_tableGen+=comment_table 
	{
		// Create return CST Node
		Node data_definition_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		data_definition_statementReturnNode.setKind("data_definition_statement");
	    // Create a CST Node
		if($comment_tableGen != null) {
	        for(Iterator it = $comment_tableGen.iterator(); it.hasNext(); )  { 
	            DDLParser.comment_table_return r = (DDLParser.comment_table_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("comment_table");
	            	data_definition_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$data_definition_statement.returnNode = data_definition_statementReturnNode;
	}
	|	comment_columnGen+=comment_column 
	{
		// Create return CST Node
		Node data_definition_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		data_definition_statementReturnNode.setKind("data_definition_statement");
	    // Create a CST Node
		if($comment_columnGen != null) {
	        for(Iterator it = $comment_columnGen.iterator(); it.hasNext(); )  { 
	            DDLParser.comment_column_return r = (DDLParser.comment_column_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("comment_column");
	            	data_definition_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$data_definition_statement.returnNode = data_definition_statementReturnNode;
	}
	|	disabled_constraintGen+=disabled_constraint 
	{
		// Create return CST Node
		Node data_definition_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		data_definition_statementReturnNode.setKind("data_definition_statement");
	    // Create a CST Node
		if($disabled_constraintGen != null) {
	        for(Iterator it = $disabled_constraintGen.iterator(); it.hasNext(); )  { 
	            DDLParser.disabled_constraint_return r = (DDLParser.disabled_constraint_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("disabled_constraint");
	            	data_definition_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$data_definition_statement.returnNode = data_definition_statementReturnNode;
	}
	|	added_constraint_ckGen+=added_constraint_ck 
	{
		// Create return CST Node
		Node data_definition_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		data_definition_statementReturnNode.setKind("data_definition_statement");
	    // Create a CST Node
		if($added_constraint_ckGen != null) {
	        for(Iterator it = $added_constraint_ckGen.iterator(); it.hasNext(); )  { 
	            DDLParser.added_constraint_ck_return r = (DDLParser.added_constraint_ck_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("added_constraint_ck");
	            	data_definition_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$data_definition_statement.returnNode = data_definition_statementReturnNode;
	}
	|	added_constraint_fkGen+=added_constraint_fk 
	{
		// Create return CST Node
		Node data_definition_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		data_definition_statementReturnNode.setKind("data_definition_statement");
	    // Create a CST Node
		if($added_constraint_fkGen != null) {
	        for(Iterator it = $added_constraint_fkGen.iterator(); it.hasNext(); )  { 
	            DDLParser.added_constraint_fk_return r = (DDLParser.added_constraint_fk_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("added_constraint_fk");
	            	data_definition_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$data_definition_statement.returnNode = data_definition_statementReturnNode;
	}	
	;

table returns [Node returnNode] 
:	TK_0='CREATE' (LOG_CONJGen=LOG_CONJ TK_1='REPLACE')? TK_2='TABLE' IDGen=ID TK_3='(' (columnGen+=column)* (TK_4=',')? (ckGen+=ck (TK_5=',')?)* (pkGen+=pk)? (TK_6=',')? (fkGen+=fk (TK_7=',')?)* TK_8=')' (TK_9='LOGGING')? (TK_10='NOCOMPRESS')? (TK_11='NOCACHE')? (TK_12='NOPARALLEL')? (TK_13='MONITORING')?TK_14=';' 
	{
		// Create return CST Node
		Node tableReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		tableReturnNode.setKind("table");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		tableReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($LOG_CONJGen != null) {
			Leaf LOG_CONJGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LOG_CONJGenLeaf.setKind("LOG_CONJ");
			LOG_CONJGenLeaf.setValue($LOG_CONJGen.text);
			LOG_CONJGenLeaf.setPos(LOG_CONJGen.getCharPositionInLine());
			LOG_CONJGenLeaf.setLine(LOG_CONJGen.getLine());
			tableReturnNode.getChildren().add(LOG_CONJGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		tableReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		tableReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IDGenLeaf.setKind("ID");
			IDGenLeaf.setValue($IDGen.text);
			IDGenLeaf.setPos(IDGen.getCharPositionInLine());
			IDGenLeaf.setLine(IDGen.getLine());
			tableReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		tableReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Node
		if($columnGen != null) {
	        for(Iterator it = $columnGen.iterator(); it.hasNext(); )  { 
	            DDLParser.column_return r = (DDLParser.column_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("column");
	            	tableReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_4Leaf.setKind("TOKEN");
	 		TK_4Leaf.setValue($TK_4.text);
			TK_4Leaf.setPos(TK_4.getCharPositionInLine());
			TK_4Leaf.setLine(TK_4.getLine());
	 		tableReturnNode.getChildren().add(TK_4Leaf);
	 	}
	
		// Create a special CST Node for terminal ckGen aggregation
		if($ckGen != null) {
	    for(int pos = 0; pos < $ckGen.size(); pos++ )  { 
		// No Terminal extractor
	    if($ckGen != null) {		
	    	DDLParser.ck_return r = (DDLParser.ck_return) $ckGen.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("ck");
	    		tableReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_5Leaf.setKind("TOKEN");
	 		TK_5Leaf.setValue($TK_5.text);
			TK_5Leaf.setPos(TK_5.getCharPositionInLine());
			TK_5Leaf.setLine(TK_5.getLine());
	 		tableReturnNode.getChildren().add(TK_5Leaf);
	 	}
		}
		}
	
	    // Create a CST Node
		if($pkGen != null) {
	        for(Iterator it = $pkGen.iterator(); it.hasNext(); )  { 
	            DDLParser.pk_return r = (DDLParser.pk_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("pk");
	            	tableReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_6Leaf.setKind("TOKEN");
	 		TK_6Leaf.setValue($TK_6.text);
			TK_6Leaf.setPos(TK_6.getCharPositionInLine());
			TK_6Leaf.setLine(TK_6.getLine());
	 		tableReturnNode.getChildren().add(TK_6Leaf);
	 	}
	
		// Create a special CST Node for terminal fkGen aggregation
		if($fkGen != null) {
	    for(int pos = 0; pos < $fkGen.size(); pos++ )  { 
		// No Terminal extractor
	    if($fkGen != null) {		
	    	DDLParser.fk_return r = (DDLParser.fk_return) $fkGen.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("fk");
	    		tableReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_7Leaf.setKind("TOKEN");
	 		TK_7Leaf.setValue($TK_7.text);
			TK_7Leaf.setPos(TK_7.getCharPositionInLine());
			TK_7Leaf.setLine(TK_7.getLine());
	 		tableReturnNode.getChildren().add(TK_7Leaf);
	 	}
		}
		}
	
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_8Leaf.setKind("TOKEN");
	 		TK_8Leaf.setValue($TK_8.text);
			TK_8Leaf.setPos(TK_8.getCharPositionInLine());
			TK_8Leaf.setLine(TK_8.getLine());
	 		tableReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_9Leaf.setKind("TOKEN");
	 		TK_9Leaf.setValue($TK_9.text);
			TK_9Leaf.setPos(TK_9.getCharPositionInLine());
			TK_9Leaf.setLine(TK_9.getLine());
	 		tableReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_10Leaf.setKind("TOKEN");
	 		TK_10Leaf.setValue($TK_10.text);
			TK_10Leaf.setPos(TK_10.getCharPositionInLine());
			TK_10Leaf.setLine(TK_10.getLine());
	 		tableReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_11Leaf.setKind("TOKEN");
	 		TK_11Leaf.setValue($TK_11.text);
			TK_11Leaf.setPos(TK_11.getCharPositionInLine());
			TK_11Leaf.setLine(TK_11.getLine());
	 		tableReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_12Leaf.setKind("TOKEN");
	 		TK_12Leaf.setValue($TK_12.text);
			TK_12Leaf.setPos(TK_12.getCharPositionInLine());
			TK_12Leaf.setLine(TK_12.getLine());
	 		tableReturnNode.getChildren().add(TK_12Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_13 != null) {
			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_13Leaf.setKind("TOKEN");
	 		TK_13Leaf.setValue($TK_13.text);
			TK_13Leaf.setPos(TK_13.getCharPositionInLine());
			TK_13Leaf.setLine(TK_13.getLine());
	 		tableReturnNode.getChildren().add(TK_13Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_14 != null) {
			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_14Leaf.setKind("TOKEN");
	 		TK_14Leaf.setValue($TK_14.text);
			TK_14Leaf.setPos(TK_14.getCharPositionInLine());
			TK_14Leaf.setLine(TK_14.getLine());
	 		tableReturnNode.getChildren().add(TK_14Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$table.returnNode = tableReturnNode;
	} 
	;

comment_table returns [Node returnNode] 
:	TK_0='COMMENT ON TABLE' IDGen=ID TK_1='IS' CVALUEGen=CVALUE TK_2=';' 
	{
		// Create return CST Node
		Node comment_tableReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		comment_tableReturnNode.setKind("comment_table");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		comment_tableReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IDGenLeaf.setKind("ID");
			IDGenLeaf.setValue($IDGen.text);
			IDGenLeaf.setPos(IDGen.getCharPositionInLine());
			IDGenLeaf.setLine(IDGen.getLine());
			comment_tableReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		comment_tableReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($CVALUEGen != null) {
			Leaf CVALUEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			CVALUEGenLeaf.setKind("CVALUE");
			CVALUEGenLeaf.setValue($CVALUEGen.text);
			CVALUEGenLeaf.setPos(CVALUEGen.getCharPositionInLine());
			CVALUEGenLeaf.setLine(CVALUEGen.getLine());
			comment_tableReturnNode.getChildren().add(CVALUEGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		comment_tableReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$comment_table.returnNode = comment_tableReturnNode;
	}
	;

column returns [Node returnNode] 
:	IDGen=ID typeGen+=type (TK_0='(' NUMBERGen=NUMBER (TK_1='BYTE')? TK_2=')')? (TK_3='CONSTRAINT')? (name_constraintGen+=name_constraint)? (TK_4='NULL' | TK_5='NOT NULL')? (defectoGen+=defecto)? (TK_6=',')? 
	{
		// Create return CST Node
		Node columnReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		columnReturnNode.setKind("column");
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IDGenLeaf.setKind("ID");
			IDGenLeaf.setValue($IDGen.text);
			IDGenLeaf.setPos(IDGen.getCharPositionInLine());
			IDGenLeaf.setLine(IDGen.getLine());
			columnReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a CST Node
		if($typeGen != null) {
	        for(Iterator it = $typeGen.iterator(); it.hasNext(); )  { 
	            DDLParser.type_return r = (DDLParser.type_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("type");
	            	columnReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		columnReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			NUMBERGenLeaf.setKind("NUMBER");
			NUMBERGenLeaf.setValue($NUMBERGen.text);
			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
			columnReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		columnReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		columnReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		columnReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Node
		if($name_constraintGen != null) {
	        for(Iterator it = $name_constraintGen.iterator(); it.hasNext(); )  { 
	            DDLParser.name_constraint_return r = (DDLParser.name_constraint_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("name_constraint");
	            	columnReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_4Leaf.setKind("TOKEN");
	 		TK_4Leaf.setValue($TK_4.text);
			TK_4Leaf.setPos(TK_4.getCharPositionInLine());
			TK_4Leaf.setLine(TK_4.getLine());
	 		columnReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_5Leaf.setKind("TOKEN");
	 		TK_5Leaf.setValue($TK_5.text);
			TK_5Leaf.setPos(TK_5.getCharPositionInLine());
			TK_5Leaf.setLine(TK_5.getLine());
	 		columnReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a CST Node
		if($defectoGen != null) {
	        for(Iterator it = $defectoGen.iterator(); it.hasNext(); )  { 
	            DDLParser.defecto_return r = (DDLParser.defecto_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("defecto");
	            	columnReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_6Leaf.setKind("TOKEN");
	 		TK_6Leaf.setValue($TK_6.text);
			TK_6Leaf.setPos(TK_6.getCharPositionInLine());
			TK_6Leaf.setLine(TK_6.getLine());
	 		columnReturnNode.getChildren().add(TK_6Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$column.returnNode = columnReturnNode;
	}
	;

defecto returns [Node returnNode] 
:	TK_0='DEFAULT' (TK_1='NULL' | TK_2='NOT NULL' | NUMBERGen=NUMBER | CVALUEGen=CVALUE) 
	{
		// Create return CST Node
		Node defectoReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		defectoReturnNode.setKind("defecto");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		defectoReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		defectoReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		defectoReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			NUMBERGenLeaf.setKind("NUMBER");
			NUMBERGenLeaf.setValue($NUMBERGen.text);
			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
			defectoReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($CVALUEGen != null) {
			Leaf CVALUEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			CVALUEGenLeaf.setKind("CVALUE");
			CVALUEGenLeaf.setValue($CVALUEGen.text);
			CVALUEGenLeaf.setPos(CVALUEGen.getCharPositionInLine());
			CVALUEGenLeaf.setLine(CVALUEGen.getLine());
			defectoReturnNode.getChildren().add(CVALUEGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$defecto.returnNode = defectoReturnNode;
	}
	;

comment_column returns [Node returnNode] 
:	TK_0='COMMENT ON COLUMN'  table_referencesGen+=table_references TK_1='\.' IDGen=ID TK_2='IS'  CVALUEGen=CVALUE TK_3=';' 
	{
		// Create return CST Node
		Node comment_columnReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		comment_columnReturnNode.setKind("comment_column");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		comment_columnReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($table_referencesGen != null) {
	        for(Iterator it = $table_referencesGen.iterator(); it.hasNext(); )  { 
	            DDLParser.table_references_return r = (DDLParser.table_references_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("table_references");
	            	comment_columnReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		comment_columnReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IDGenLeaf.setKind("ID");
			IDGenLeaf.setValue($IDGen.text);
			IDGenLeaf.setPos(IDGen.getCharPositionInLine());
			IDGenLeaf.setLine(IDGen.getLine());
			comment_columnReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		comment_columnReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($CVALUEGen != null) {
			Leaf CVALUEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			CVALUEGenLeaf.setKind("CVALUE");
			CVALUEGenLeaf.setValue($CVALUEGen.text);
			CVALUEGenLeaf.setPos(CVALUEGen.getCharPositionInLine());
			CVALUEGenLeaf.setLine(CVALUEGen.getLine());
			comment_columnReturnNode.getChildren().add(CVALUEGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		comment_columnReturnNode.getChildren().add(TK_3Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$comment_column.returnNode = comment_columnReturnNode;
	}
	;

disabled_constraint returns [Node returnNode] 
: TK_0='ALTER TABLE' table_referencesGen+=table_references TK_1='DROP CONSTRAINT' name_constraintGen+=name_constraint TK_2=';' 
	{
		// Create return CST Node
		Node disabled_constraintReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		disabled_constraintReturnNode.setKind("disabled_constraint");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		disabled_constraintReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($table_referencesGen != null) {
	        for(Iterator it = $table_referencesGen.iterator(); it.hasNext(); )  { 
	            DDLParser.table_references_return r = (DDLParser.table_references_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("table_references");
	            	disabled_constraintReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		disabled_constraintReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($name_constraintGen != null) {
	        for(Iterator it = $name_constraintGen.iterator(); it.hasNext(); )  { 
	            DDLParser.name_constraint_return r = (DDLParser.name_constraint_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("name_constraint");
	            	disabled_constraintReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		disabled_constraintReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$disabled_constraint.returnNode = disabled_constraintReturnNode;
	}
	;

added_constraint_fk returns [Node returnNode] 
: TK_0='ALTER TABLE' table_referencesGen+=table_references TK_1='ADD' fkGen+=fk TK_2=';' 
	{
		// Create return CST Node
		Node added_constraint_fkReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		added_constraint_fkReturnNode.setKind("added_constraint_fk");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		added_constraint_fkReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($table_referencesGen != null) {
	        for(Iterator it = $table_referencesGen.iterator(); it.hasNext(); )  { 
	            DDLParser.table_references_return r = (DDLParser.table_references_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("table_references");
	            	added_constraint_fkReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		added_constraint_fkReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($fkGen != null) {
	        for(Iterator it = $fkGen.iterator(); it.hasNext(); )  { 
	            DDLParser.fk_return r = (DDLParser.fk_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("fk");
	            	added_constraint_fkReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		added_constraint_fkReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$added_constraint_fk.returnNode = added_constraint_fkReturnNode;
	}
	;

added_constraint_ck returns [Node returnNode] 
: TK_0='ALTER TABLE' table_referencesGen+=table_references TK_1='ADD' ckGen+=ck TK_2=';' 
	{
		// Create return CST Node
		Node added_constraint_ckReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		added_constraint_ckReturnNode.setKind("added_constraint_ck");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		added_constraint_ckReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($table_referencesGen != null) {
	        for(Iterator it = $table_referencesGen.iterator(); it.hasNext(); )  { 
	            DDLParser.table_references_return r = (DDLParser.table_references_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("table_references");
	            	added_constraint_ckReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		added_constraint_ckReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($ckGen != null) {
	        for(Iterator it = $ckGen.iterator(); it.hasNext(); )  { 
	            DDLParser.ck_return r = (DDLParser.ck_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("ck");
	            	added_constraint_ckReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		added_constraint_ckReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$added_constraint_ck.returnNode = added_constraint_ckReturnNode;
	}
	;

ck returns [Node returnNode] 
:	TK_0='CONSTRAINT' IDGen=ID TK_1='CHECK' TK_2='(' (log_expresionGen+=log_expresion)+ TK_3=')' 
	{
		// Create return CST Node
		Node ckReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		ckReturnNode.setKind("ck");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		ckReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IDGenLeaf.setKind("ID");
			IDGenLeaf.setValue($IDGen.text);
			IDGenLeaf.setPos(IDGen.getCharPositionInLine());
			IDGenLeaf.setLine(IDGen.getLine());
			ckReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		ckReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		ckReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($log_expresionGen != null) {
	        for(Iterator it = $log_expresionGen.iterator(); it.hasNext(); )  { 
	            DDLParser.log_expresion_return r = (DDLParser.log_expresion_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("log_expresion");
	            	ckReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		ckReturnNode.getChildren().add(TK_3Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$ck.returnNode = ckReturnNode;
	}
	;
	
fk returns [Node returnNode] 
:	TK_0='CONSTRAINT' IDGen=ID TK_1='FOREIGN KEY' TK_2='(' (column_listGen+=column_list)* TK_3=')' TK_4='REFERENCES' (schema_referencesGen+=schema_references)? (TK_5='\.')? table_referencesGen+=table_references TK_6='(' (references_column_listGen+=references_column_list)* TK_7=')' (TK_8='ON')? (TK_9='DELETE' | TK_10='UPDATE')? (TK_11='CASCADE')? (TK_12='DISABLE')? 
	{
		// Create return CST Node
		Node fkReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		fkReturnNode.setKind("fk");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		fkReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IDGenLeaf.setKind("ID");
			IDGenLeaf.setValue($IDGen.text);
			IDGenLeaf.setPos(IDGen.getCharPositionInLine());
			IDGenLeaf.setLine(IDGen.getLine());
			fkReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		fkReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		fkReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($column_listGen != null) {
	        for(Iterator it = $column_listGen.iterator(); it.hasNext(); )  { 
	            DDLParser.column_list_return r = (DDLParser.column_list_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("column_list");
	            	fkReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		fkReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_4Leaf.setKind("TOKEN");
	 		TK_4Leaf.setValue($TK_4.text);
			TK_4Leaf.setPos(TK_4.getCharPositionInLine());
			TK_4Leaf.setLine(TK_4.getLine());
	 		fkReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a CST Node
		if($schema_referencesGen != null) {
	        for(Iterator it = $schema_referencesGen.iterator(); it.hasNext(); )  { 
	            DDLParser.schema_references_return r = (DDLParser.schema_references_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("schema_references");
	            	fkReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_5Leaf.setKind("TOKEN");
	 		TK_5Leaf.setValue($TK_5.text);
			TK_5Leaf.setPos(TK_5.getCharPositionInLine());
			TK_5Leaf.setLine(TK_5.getLine());
	 		fkReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a CST Node
		if($table_referencesGen != null) {
	        for(Iterator it = $table_referencesGen.iterator(); it.hasNext(); )  { 
	            DDLParser.table_references_return r = (DDLParser.table_references_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("table_references");
	            	fkReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_6Leaf.setKind("TOKEN");
	 		TK_6Leaf.setValue($TK_6.text);
			TK_6Leaf.setPos(TK_6.getCharPositionInLine());
			TK_6Leaf.setLine(TK_6.getLine());
	 		fkReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a CST Node
		if($references_column_listGen != null) {
	        for(Iterator it = $references_column_listGen.iterator(); it.hasNext(); )  { 
	            DDLParser.references_column_list_return r = (DDLParser.references_column_list_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("references_column_list");
	            	fkReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_7Leaf.setKind("TOKEN");
	 		TK_7Leaf.setValue($TK_7.text);
			TK_7Leaf.setPos(TK_7.getCharPositionInLine());
			TK_7Leaf.setLine(TK_7.getLine());
	 		fkReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_8Leaf.setKind("TOKEN");
	 		TK_8Leaf.setValue($TK_8.text);
			TK_8Leaf.setPos(TK_8.getCharPositionInLine());
			TK_8Leaf.setLine(TK_8.getLine());
	 		fkReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_9Leaf.setKind("TOKEN");
	 		TK_9Leaf.setValue($TK_9.text);
			TK_9Leaf.setPos(TK_9.getCharPositionInLine());
			TK_9Leaf.setLine(TK_9.getLine());
	 		fkReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_10Leaf.setKind("TOKEN");
	 		TK_10Leaf.setValue($TK_10.text);
			TK_10Leaf.setPos(TK_10.getCharPositionInLine());
			TK_10Leaf.setLine(TK_10.getLine());
	 		fkReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_11Leaf.setKind("TOKEN");
	 		TK_11Leaf.setValue($TK_11.text);
			TK_11Leaf.setPos(TK_11.getCharPositionInLine());
			TK_11Leaf.setLine(TK_11.getLine());
	 		fkReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_12Leaf.setKind("TOKEN");
	 		TK_12Leaf.setValue($TK_12.text);
			TK_12Leaf.setPos(TK_12.getCharPositionInLine());
			TK_12Leaf.setLine(TK_12.getLine());
	 		fkReturnNode.getChildren().add(TK_12Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$fk.returnNode = fkReturnNode;
	}
	;

pk returns [Node returnNode] 
:	TK_0='CONSTRAINT' IDGen=ID TK_1='PRIMARY KEY' TK_2='(' (column_listGen+=column_list)* TK_3=')' 
	{
		// Create return CST Node
		Node pkReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		pkReturnNode.setKind("pk");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		pkReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IDGenLeaf.setKind("ID");
			IDGenLeaf.setValue($IDGen.text);
			IDGenLeaf.setPos(IDGen.getCharPositionInLine());
			IDGenLeaf.setLine(IDGen.getLine());
			pkReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		pkReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		pkReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($column_listGen != null) {
	        for(Iterator it = $column_listGen.iterator(); it.hasNext(); )  { 
	            DDLParser.column_list_return r = (DDLParser.column_list_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("column_list");
	            	pkReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		pkReturnNode.getChildren().add(TK_3Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$pk.returnNode = pkReturnNode;
	}
	;

column_ck returns [Node returnNode] 
:	IDGen=ID 
	{
		// Create return CST Node
		Node column_ckReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		column_ckReturnNode.setKind("column_ck");
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IDGenLeaf.setKind("ID");
			IDGenLeaf.setValue($IDGen.text);
			IDGenLeaf.setPos(IDGen.getCharPositionInLine());
			IDGenLeaf.setLine(IDGen.getLine());
			column_ckReturnNode.getChildren().add(IDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$column_ck.returnNode = column_ckReturnNode;
	}
	;

schema_references returns [Node returnNode] 
:	IDGen=ID 
	{
		// Create return CST Node
		Node schema_referencesReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		schema_referencesReturnNode.setKind("schema_references");
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IDGenLeaf.setKind("ID");
			IDGenLeaf.setValue($IDGen.text);
			IDGenLeaf.setPos(IDGen.getCharPositionInLine());
			IDGenLeaf.setLine(IDGen.getLine());
			schema_referencesReturnNode.getChildren().add(IDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$schema_references.returnNode = schema_referencesReturnNode;
	}
	;

table_references returns [Node returnNode] 
:	IDGen=ID 
	{
		// Create return CST Node
		Node table_referencesReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		table_referencesReturnNode.setKind("table_references");
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IDGenLeaf.setKind("ID");
			IDGenLeaf.setValue($IDGen.text);
			IDGenLeaf.setPos(IDGen.getCharPositionInLine());
			IDGenLeaf.setLine(IDGen.getLine());
			table_referencesReturnNode.getChildren().add(IDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$table_references.returnNode = table_referencesReturnNode;
	}
	;

name_constraint returns [Node returnNode] 
:	IDGen=ID 
	{
		// Create return CST Node
		Node name_constraintReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		name_constraintReturnNode.setKind("name_constraint");
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IDGenLeaf.setKind("ID");
			IDGenLeaf.setValue($IDGen.text);
			IDGenLeaf.setPos(IDGen.getCharPositionInLine());
			IDGenLeaf.setLine(IDGen.getLine());
			name_constraintReturnNode.getChildren().add(IDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$name_constraint.returnNode = name_constraintReturnNode;
	}
	;

references_column_list returns [Node returnNode] 
:	IDGen=ID (TK_0=',')? 
	{
		// Create return CST Node
		Node references_column_listReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		references_column_listReturnNode.setKind("references_column_list");
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IDGenLeaf.setKind("ID");
			IDGenLeaf.setValue($IDGen.text);
			IDGenLeaf.setPos(IDGen.getCharPositionInLine());
			IDGenLeaf.setLine(IDGen.getLine());
			references_column_listReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		references_column_listReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$references_column_list.returnNode = references_column_listReturnNode;
	}
	;

value_list returns [Node returnNode] 
:	CVALUEGen=CVALUE (TK_0=',')? 
	{
		// Create return CST Node
		Node value_listReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		value_listReturnNode.setKind("value_list");
	    // Create a CST Leaf
		if($CVALUEGen != null) {
			Leaf CVALUEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			CVALUEGenLeaf.setKind("CVALUE");
			CVALUEGenLeaf.setValue($CVALUEGen.text);
			CVALUEGenLeaf.setPos(CVALUEGen.getCharPositionInLine());
			CVALUEGenLeaf.setLine(CVALUEGen.getLine());
			value_listReturnNode.getChildren().add(CVALUEGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		value_listReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$value_list.returnNode = value_listReturnNode;
	}
	;

column_list returns [Node returnNode] 
:	IDGen=ID (TK_0=',')? 
	{
		// Create return CST Node
		Node column_listReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		column_listReturnNode.setKind("column_list");
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IDGenLeaf.setKind("ID");
			IDGenLeaf.setValue($IDGen.text);
			IDGenLeaf.setPos(IDGen.getCharPositionInLine());
			IDGenLeaf.setLine(IDGen.getLine());
			column_listReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		column_listReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$column_list.returnNode = column_listReturnNode;
	}
	;

database returns [Node returnNode] 
:	TK_0='CREATE' (TK_1='DATABASE' | TK_2='SCHEMA') (TK_3='IF NOT EXISTS')? IDGen=ID (specificationGen+=specification)? TK_4=';' 
	{
		// Create return CST Node
		Node databaseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		databaseReturnNode.setKind("database");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		databaseReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		databaseReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		databaseReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		databaseReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IDGenLeaf.setKind("ID");
			IDGenLeaf.setValue($IDGen.text);
			IDGenLeaf.setPos(IDGen.getCharPositionInLine());
			IDGenLeaf.setLine(IDGen.getLine());
			databaseReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a CST Node
		if($specificationGen != null) {
	        for(Iterator it = $specificationGen.iterator(); it.hasNext(); )  { 
	            DDLParser.specification_return r = (DDLParser.specification_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("specification");
	            	databaseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_4Leaf.setKind("TOKEN");
	 		TK_4Leaf.setValue($TK_4.text);
			TK_4Leaf.setPos(TK_4.getCharPositionInLine());
			TK_4Leaf.setLine(TK_4.getLine());
	 		databaseReturnNode.getChildren().add(TK_4Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$database.returnNode = databaseReturnNode;
	}
	;

specification returns [Node returnNode] 
:	(TK_0='DEFAULT')? TK_1='CHARACTER' TK_2='SET' (COMPARATORGen=COMPARATOR)? IDGen=ID 
	{
		// Create return CST Node
		Node specificationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		specificationReturnNode.setKind("specification");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		specificationReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		specificationReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		specificationReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($COMPARATORGen != null) {
			Leaf COMPARATORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			COMPARATORGenLeaf.setKind("COMPARATOR");
			COMPARATORGenLeaf.setValue($COMPARATORGen.text);
			COMPARATORGenLeaf.setPos(COMPARATORGen.getCharPositionInLine());
			COMPARATORGenLeaf.setLine(COMPARATORGen.getLine());
			specificationReturnNode.getChildren().add(COMPARATORGenLeaf);
		}
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IDGenLeaf.setKind("ID");
			IDGenLeaf.setValue($IDGen.text);
			IDGenLeaf.setPos(IDGen.getCharPositionInLine());
			IDGenLeaf.setLine(IDGen.getLine());
			specificationReturnNode.getChildren().add(IDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$specification.returnNode = specificationReturnNode;
	}
  	|	(TK_0='DEFAULT')? TK_1='COLLATE' (COMPARATORGen=COMPARATOR)? IDGen=ID 
	{
		// Create return CST Node
		Node specificationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		specificationReturnNode.setKind("specification");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		specificationReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		specificationReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($COMPARATORGen != null) {
			Leaf COMPARATORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			COMPARATORGenLeaf.setKind("COMPARATOR");
			COMPARATORGenLeaf.setValue($COMPARATORGen.text);
			COMPARATORGenLeaf.setPos(COMPARATORGen.getCharPositionInLine());
			COMPARATORGenLeaf.setLine(COMPARATORGen.getLine());
			specificationReturnNode.getChildren().add(COMPARATORGenLeaf);
		}
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IDGenLeaf.setKind("ID");
			IDGenLeaf.setValue($IDGen.text);
			IDGenLeaf.setPos(IDGen.getCharPositionInLine());
			IDGenLeaf.setLine(IDGen.getLine());
			specificationReturnNode.getChildren().add(IDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$specification.returnNode = specificationReturnNode;
	}
  	;

log_expresion returns [Node returnNode] 
: column_ckGen+=column_ck (COMPARATORGen=COMPARATOR (NUMBERGen=NUMBER | CVALUEGen=CVALUE) LOG_CONJGen=LOG_CONJ? | TK_0='IN' TK_1='(' (value_listGen+=value_list)* TK_2=')') 
	{
		// Create return CST Node
		Node log_expresionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		log_expresionReturnNode.setKind("log_expresion");
	    // Create a CST Node
		if($column_ckGen != null) {
	        for(Iterator it = $column_ckGen.iterator(); it.hasNext(); )  { 
	            DDLParser.column_ck_return r = (DDLParser.column_ck_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("column_ck");
	            	log_expresionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($COMPARATORGen != null) {
			Leaf COMPARATORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			COMPARATORGenLeaf.setKind("COMPARATOR");
			COMPARATORGenLeaf.setValue($COMPARATORGen.text);
			COMPARATORGenLeaf.setPos(COMPARATORGen.getCharPositionInLine());
			COMPARATORGenLeaf.setLine(COMPARATORGen.getLine());
			log_expresionReturnNode.getChildren().add(COMPARATORGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			NUMBERGenLeaf.setKind("NUMBER");
			NUMBERGenLeaf.setValue($NUMBERGen.text);
			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
			log_expresionReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($CVALUEGen != null) {
			Leaf CVALUEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			CVALUEGenLeaf.setKind("CVALUE");
			CVALUEGenLeaf.setValue($CVALUEGen.text);
			CVALUEGenLeaf.setPos(CVALUEGen.getCharPositionInLine());
			CVALUEGenLeaf.setLine(CVALUEGen.getLine());
			log_expresionReturnNode.getChildren().add(CVALUEGenLeaf);
		}
	    // Create a CST Leaf
		if($LOG_CONJGen != null) {
			Leaf LOG_CONJGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LOG_CONJGenLeaf.setKind("LOG_CONJ");
			LOG_CONJGenLeaf.setValue($LOG_CONJGen.text);
			LOG_CONJGenLeaf.setPos(LOG_CONJGen.getCharPositionInLine());
			LOG_CONJGenLeaf.setLine(LOG_CONJGen.getLine());
			log_expresionReturnNode.getChildren().add(LOG_CONJGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		log_expresionReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		log_expresionReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($value_listGen != null) {
	        for(Iterator it = $value_listGen.iterator(); it.hasNext(); )  { 
	            DDLParser.value_list_return r = (DDLParser.value_list_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("value_list");
	            	log_expresionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		log_expresionReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$log_expresion.returnNode = log_expresionReturnNode;
	}
	;

type returns [Node returnNode] 
:	(EXACTOGen=EXACTO | APROXIMADOGen=APROXIMADO | CHARACTERSGen=CHARACTERS | BITSGen=BITS | TIMESGen=TIMES | INTERVALSGen=INTERVALS | BINARIESGen=BINARIES) 
	{
		// Create return CST Node
		Node typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		typeReturnNode.setKind("type");
	    // Create a CST Leaf
		if($EXACTOGen != null) {
			Leaf EXACTOGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			EXACTOGenLeaf.setKind("EXACTO");
			EXACTOGenLeaf.setValue($EXACTOGen.text);
			EXACTOGenLeaf.setPos(EXACTOGen.getCharPositionInLine());
			EXACTOGenLeaf.setLine(EXACTOGen.getLine());
			typeReturnNode.getChildren().add(EXACTOGenLeaf);
		}
	    // Create a CST Leaf
		if($APROXIMADOGen != null) {
			Leaf APROXIMADOGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			APROXIMADOGenLeaf.setKind("APROXIMADO");
			APROXIMADOGenLeaf.setValue($APROXIMADOGen.text);
			APROXIMADOGenLeaf.setPos(APROXIMADOGen.getCharPositionInLine());
			APROXIMADOGenLeaf.setLine(APROXIMADOGen.getLine());
			typeReturnNode.getChildren().add(APROXIMADOGenLeaf);
		}
	    // Create a CST Leaf
		if($CHARACTERSGen != null) {
			Leaf CHARACTERSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			CHARACTERSGenLeaf.setKind("CHARACTERS");
			CHARACTERSGenLeaf.setValue($CHARACTERSGen.text);
			CHARACTERSGenLeaf.setPos(CHARACTERSGen.getCharPositionInLine());
			CHARACTERSGenLeaf.setLine(CHARACTERSGen.getLine());
			typeReturnNode.getChildren().add(CHARACTERSGenLeaf);
		}
	    // Create a CST Leaf
		if($BITSGen != null) {
			Leaf BITSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			BITSGenLeaf.setKind("BITS");
			BITSGenLeaf.setValue($BITSGen.text);
			BITSGenLeaf.setPos(BITSGen.getCharPositionInLine());
			BITSGenLeaf.setLine(BITSGen.getLine());
			typeReturnNode.getChildren().add(BITSGenLeaf);
		}
	    // Create a CST Leaf
		if($TIMESGen != null) {
			Leaf TIMESGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			TIMESGenLeaf.setKind("TIMES");
			TIMESGenLeaf.setValue($TIMESGen.text);
			TIMESGenLeaf.setPos(TIMESGen.getCharPositionInLine());
			TIMESGenLeaf.setLine(TIMESGen.getLine());
			typeReturnNode.getChildren().add(TIMESGenLeaf);
		}
	    // Create a CST Leaf
		if($INTERVALSGen != null) {
			Leaf INTERVALSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			INTERVALSGenLeaf.setKind("INTERVALS");
			INTERVALSGenLeaf.setValue($INTERVALSGen.text);
			INTERVALSGenLeaf.setPos(INTERVALSGen.getCharPositionInLine());
			INTERVALSGenLeaf.setLine(INTERVALSGen.getLine());
			typeReturnNode.getChildren().add(INTERVALSGenLeaf);
		}
	    // Create a CST Leaf
		if($BINARIESGen != null) {
			Leaf BINARIESGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			BINARIESGenLeaf.setKind("BINARIES");
			BINARIESGenLeaf.setValue($BINARIESGen.text);
			BINARIESGenLeaf.setPos(BINARIESGen.getCharPositionInLine());
			BINARIESGenLeaf.setLine(BINARIESGen.getLine());
			typeReturnNode.getChildren().add(BINARIESGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$type.returnNode = typeReturnNode;
	}
	;

EXACTO
	:	('NUMBER' | 'NUMERIC' | 'INTEGER' | 'SMALL INTEGER' | 'DECIMAL' | 'INT' | 'SMALL INT')
	;

APROXIMADO
	: ('DOUBLE PRECISION' | 'LONG' | 'LONG RAW' | 'FLOAT' | 'REAL')
	;

CHARACTERS
	: ('CHAR' | 'VARCHAR' | 'VARCHAR2' | 'NVARCHAR2' | 'NCHAR' | 'CHAR VARYING' | 'CHARACTER' | 'CHARACTER VARYING' | 'NATIONAL CHAR' | 'NATIONAL CHAR VARYING' | 'NATIONAL CHARACTER' | 'NATIONAL CHARACTER VARYING' | 'NCHAR VARYING' | 'CLOB' | 'NCLOB')
	;

BITS
	: ('BIT' | 'BIT VARYING')
	;

TIMES
	: ('DATE' | 'TIME' | 'TIMESTAMP')
	;

INTERVALS
	: ('YEAR-MONTH' | 'DAY-TIME')
	;

BINARIES
	: ('BFILE' | 'BLOB' | 'BINARY_DOUBLE' | 'BINARY_FLOAT')
	;

SQUOTE					: '\u0027';
CVALUE					: SQUOTE ( options {greedy=false;} : . )* SQUOTE;
NUMBER					: ('0'..'9' | ',')*;
COMPARATOR				:  '<>' | '>=' | '<=' | '=' | '>' | '<';
LOG_CONJ				: 'OR' | 'AND';
ID 						: ('a'..'z' | 'A'..'Z') ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | '$' | '#' | '-' )*;
WS 						: (' ' | '\t' | '\n' | '\r')+ {$channel=HIDDEN;};
ML_COMMENT:
	'/*' (options {greedy=false;} : .)* '*/' (';')? { $channel=HIDDEN;}
	;
	
OL_COMMENT: '--' ( options {greedy=false;} : . )* '\n'+ { $channel=HIDDEN;}
	;