grammar DMLSelect;

statements
	:	query_specification*
	;

query_specification
	:	'SELECT' (SET_QUANTIFIER)? select_list table_expression 
	;

select_list
	:	ASTERISK | select_sublist (COMMA select_sublist)*
	;

select_sublist
	:	SUMARIZE (IDEXPRESSION PERIOD)? IDEXPRESSION | derived_column | table_name PERIOD ASTERISK | expression
	;

derived_column
	:	column_reference (as_clause)?
	;
	
as_clause
	:	('AS')? column_name
	;
	
expression
	:	IDEXPRESSION (as_clause)?
	;

column_name
	:	ID
	;

table_expression
	:	from_clause (where_clause)? (group_by_clause)? (having_clause)? (order_by_clause)?
	;

from_clause
	:	'FROM' table_reference (COMMA table_reference)*
	;

table_reference
	:	table_name (correlation_specification)?
	;

table_name
	:	ID
	;
	
correlation_specification
	:	 ('AS')? correlation_name
	;

correlation_name
	:	ID
	;

where_clause
	:	'WHERE' search_condition (ID)*
	;

group_by_clause
	:	'GROUP BY' (grouping_column_reference_list)?
	;

grouping_column_reference_list
	:	grouping_column_reference (COMMA grouping_column_reference)*
	;

grouping_column_reference
	:	column_reference
	;

column_reference
	:	(table_name PERIOD)? column_name
	;

having_clause
	:	'HAVING' search_condition
	;

search_condition
	:	boolean_term  ('OR' boolean_term)*
	;

boolean_term
	:	boolean_factor ('AND' boolean_factor)*
	;

boolean_factor
	:	('NOT')? predicate
	;

predicate
	:	comparison_predicate | between_predicate | in_predicate | like_predicate | null_predicate
	;

comparison_predicate
	:	complete_comparison_predicate | incomplete_comparison_predicate
	;

complete_comparison_predicate
	:	row_value_constructor comp_op row_value_constructor
	;

incomplete_comparison_predicate
	:	row_value_constructor comp_op | comp_op row_value_constructor | comp_op
	;

row_value_constructor
	:	NULL_SPECIFICATION | DEFAULT_SPECIFICATION | UNSIGNED_INTEGER | column_reference | expression
	;

comp_op	:	EQUALS_OPERATOR | NOT_EQUALS_OPERATOR | LESS_THAN_OPERATOR | GREATER_THAN_OPERATOR | LESS_THAN_OR_EQUALS_OPERATOR | GREATER_THAN_OR_EQUALS_OPERATOR
	;

between_predicate
	:	row_value_constructor ('NOT')? 'BETWEEN' (row_value_constructor)? 'AND' (row_value_constructor)?
	;

in_predicate
	:	row_value_constructor ('NOT')? 'IN' in_predicate_value
	;

in_predicate_value
	:	LEFT_PARENT in_value_list RIGHT_PARENT
	;

in_value_list
	:	derived_column (COMMA derived_column)*
	;

like_predicate
	:	match_value ('NOT')? 'LIKE' (pattern)?
	;
	
match_value
	:	derived_column | expression
	;
	
pattern	
	:	derived_column | expression
	;
	
null_predicate
	:	'IS' ('NOT')? 'NULL'
	;

order_by_clause
	:	'ORDER BY' (sort_specification_list)?
	;

sort_specification_list
	:	sort_specification (COMMA sort_specification)*
	;
	
sort_specification
	:	sort_key (ORDERING_SPECIFICATION)?
	;

sort_key
	:	column_name | UNSIGNED_INTEGER
	;

EQUALS_OPERATOR
	:	'='
	;

NOT_EQUALS_OPERATOR
	:	'<>'
	;

LESS_THAN_OPERATOR
	:	'<'
	;

GREATER_THAN_OPERATOR
	:	'>'
	;

LESS_THAN_OR_EQUALS_OPERATOR
	:	'<='
	;

GREATER_THAN_OR_EQUALS_OPERATOR
	:	'>='
	;
NULL_SPECIFICATION
	:	'NULL'
	;

DEFAULT_SPECIFICATION
	:	'DEFAULT'
	;

TRUTH_VALUE
	:	'TRUE' | 'FALSE' | 'UNKNOWN'
	;

LEFT_PARENT
	:	'('
	;

RIGHT_PARENT
	:	')'
	;

SET_QUANTIFIER
	:	'DISTINCT' | 'ALL'
	;
	
ASTERISK
	:	'*'
	;
	
COMMA
	:	','
	;
	
PERIOD
	:	'.'
	;
	
SUMARIZE
	: 'MAX' | 'MIN' | 'AVG' | 'COUNT' | 'SUM'
	;

ORDERING_SPECIFICATION
	:	'ASC' | 'DESC'
	;
	
UNSIGNED_INTEGER
	:	('0'..'9')*
	;

ID
	:	('a'..'z'|'A'..'Z'|'0'..'9'|'_'|'?'|':')*
	;

IDEXPRESSION
	:	('a'..'z'|'A'..'Z'|'0'..'9'|'_'|'?'|':'|'('|')'|'+'|'-'|'*'|'/'|'%'|'\'')*
	;
	
WS 	: (' ' | '\t' | '\n' | '\r' | '\u000C')+ {$channel=HIDDEN;};