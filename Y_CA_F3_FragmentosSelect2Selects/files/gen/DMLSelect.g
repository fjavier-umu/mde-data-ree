grammar DMLSelect; 

// Autogenerated options
options {
	output=template;
}




// Autogenerated import
@header {
	import gts.modernization.model.CST.impl.*;
	import gts.modernization.model.CST.*;
	import java.util.Iterator;
}

// Rules
statements returns [Node returnNode] 
:	 query_specificationGen+=query_specification* 
	{
		// Create return CST Node
		Node statementsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		statementsReturnNode.setKind("statements");
	    // Create a CST Node
		if($query_specificationGen != null) {
	        for(Iterator it = $query_specificationGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.query_specification_return r = (DMLSelectParser.query_specification_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("query_specification");
	            	statementsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$statements.returnNode = statementsReturnNode;
	}
	;

query_specification returns [Node returnNode] 
:	 TK_0='SELECT' ( SET_QUANTIFIERGen=SET_QUANTIFIER)? (( IDGen=ID |  IDEXPRESSIONGen=IDEXPRESSION |  PERIODGen=PERIOD|  ASTERISKGen=ASTERISK |  COMMAGen=COMMA) ( TK_1='AS')?)*   table_expressionGen+=table_expression 
	{
		// Create return CST Node
		Node query_specificationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		query_specificationReturnNode.setKind("query_specification");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		query_specificationReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($SET_QUANTIFIERGen != null) {
			Leaf SET_QUANTIFIERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("SET_QUANTIFIER", $SET_QUANTIFIERGen.text, SET_QUANTIFIERGen.getCharPositionInLine(), SET_QUANTIFIERGen.getLine());
			query_specificationReturnNode.getChildren().add(SET_QUANTIFIERGenLeaf);
		}
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			query_specificationReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a CST Leaf
		if($IDEXPRESSIONGen != null) {
			Leaf IDEXPRESSIONGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("IDEXPRESSION", $IDEXPRESSIONGen.text, IDEXPRESSIONGen.getCharPositionInLine(), IDEXPRESSIONGen.getLine());
			query_specificationReturnNode.getChildren().add(IDEXPRESSIONGenLeaf);
		}
	    // Create a CST Leaf
		if($PERIODGen != null) {
			Leaf PERIODGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PERIOD", $PERIODGen.text, PERIODGen.getCharPositionInLine(), PERIODGen.getLine());
			query_specificationReturnNode.getChildren().add(PERIODGenLeaf);
		}
	    // Create a CST Leaf
		if($ASTERISKGen != null) {
			Leaf ASTERISKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ASTERISK", $ASTERISKGen.text, ASTERISKGen.getCharPositionInLine(), ASTERISKGen.getLine());
			query_specificationReturnNode.getChildren().add(ASTERISKGenLeaf);
		}
	    // Create a CST Leaf
		if($COMMAGen != null) {
			Leaf COMMAGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("COMMA", $COMMAGen.text, COMMAGen.getCharPositionInLine(), COMMAGen.getLine());
			query_specificationReturnNode.getChildren().add(COMMAGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		query_specificationReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($table_expressionGen != null) {
	        for(Iterator it = $table_expressionGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.table_expression_return r = (DMLSelectParser.table_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("table_expression");
	            	query_specificationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$query_specification.returnNode = query_specificationReturnNode;
	} 
	;

derived_column returns [Node returnNode] 
:	 column_referenceGen+=column_reference ( as_clauseGen+=as_clause)? 
	{
		// Create return CST Node
		Node derived_columnReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		derived_columnReturnNode.setKind("derived_column");
	    // Create a CST Node
		if($column_referenceGen != null) {
	        for(Iterator it = $column_referenceGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.column_reference_return r = (DMLSelectParser.column_reference_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("column_reference");
	            	derived_columnReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($as_clauseGen != null) {
	        for(Iterator it = $as_clauseGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.as_clause_return r = (DMLSelectParser.as_clause_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("as_clause");
	            	derived_columnReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$derived_column.returnNode = derived_columnReturnNode;
	}
	;
	
as_clause returns [Node returnNode] 
:	( TK_0='AS')?  column_nameGen+=column_name 
	{
		// Create return CST Node
		Node as_clauseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		as_clauseReturnNode.setKind("as_clause");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		as_clauseReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($column_nameGen != null) {
	        for(Iterator it = $column_nameGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.column_name_return r = (DMLSelectParser.column_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("column_name");
	            	as_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$as_clause.returnNode = as_clauseReturnNode;
	}
	;
	
expression returns [Node returnNode] 
:	 IDEXPRESSIONGen=IDEXPRESSION ( as_clauseGen+=as_clause)? 
	{
		// Create return CST Node
		Node expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		expressionReturnNode.setKind("expression");
	    // Create a CST Leaf
		if($IDEXPRESSIONGen != null) {
			Leaf IDEXPRESSIONGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("IDEXPRESSION", $IDEXPRESSIONGen.text, IDEXPRESSIONGen.getCharPositionInLine(), IDEXPRESSIONGen.getLine());
			expressionReturnNode.getChildren().add(IDEXPRESSIONGenLeaf);
		}
	    // Create a CST Node
		if($as_clauseGen != null) {
	        for(Iterator it = $as_clauseGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.as_clause_return r = (DMLSelectParser.as_clause_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("as_clause");
	            	expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$expression.returnNode = expressionReturnNode;
	}
	;

column_name returns [Node returnNode] 
:	 IDGen=ID 
	{
		// Create return CST Node
		Node column_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		column_nameReturnNode.setKind("column_name");
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			column_nameReturnNode.getChildren().add(IDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$column_name.returnNode = column_nameReturnNode;
	}
	;

table_expression returns [Node returnNode] 
:	 from_clauseGen+=from_clause ( where_clauseGen+=where_clause)? ( group_by_clauseGen+=group_by_clause)? ( having_clauseGen+=having_clause)? ( order_by_clauseGen+=order_by_clause)? 
	{
		// Create return CST Node
		Node table_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		table_expressionReturnNode.setKind("table_expression");
	    // Create a CST Node
		if($from_clauseGen != null) {
	        for(Iterator it = $from_clauseGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.from_clause_return r = (DMLSelectParser.from_clause_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("from_clause");
	            	table_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($where_clauseGen != null) {
	        for(Iterator it = $where_clauseGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.where_clause_return r = (DMLSelectParser.where_clause_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("where_clause");
	            	table_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($group_by_clauseGen != null) {
	        for(Iterator it = $group_by_clauseGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.group_by_clause_return r = (DMLSelectParser.group_by_clause_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("group_by_clause");
	            	table_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($having_clauseGen != null) {
	        for(Iterator it = $having_clauseGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.having_clause_return r = (DMLSelectParser.having_clause_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("having_clause");
	            	table_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($order_by_clauseGen != null) {
	        for(Iterator it = $order_by_clauseGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.order_by_clause_return r = (DMLSelectParser.order_by_clause_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("order_by_clause");
	            	table_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$table_expression.returnNode = table_expressionReturnNode;
	}
	;

from_clause returns [Node returnNode] 
:	 TK_0='FROM'  table_referenceGen+=table_reference ( COMMAGen_List+=COMMA  table_referenceGen_1+=table_reference)* 
	{
		// Create return CST Node
		Node from_clauseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		from_clauseReturnNode.setKind("from_clause");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		from_clauseReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($table_referenceGen != null) {
	        for(Iterator it = $table_referenceGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.table_reference_return r = (DMLSelectParser.table_reference_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("table_reference");
	            	from_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }

		// Create a special CST Node for terminal COMMAGen_List aggregation
		if($COMMAGen_List != null) {
	    for(int pos = 0; pos < $COMMAGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($COMMAGen_List != null) {
		    Token t = (Token) $COMMAGen_List.get(pos); 
		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("COMMA", t.getText(), t.getCharPositionInLine(), t.getLine());
			from_clauseReturnNode.getChildren().add(COMMAGen_ListLeaf);
		}
		// No Terminal extractor
	    if($table_referenceGen_1 != null) {		
	    	DMLSelectParser.table_reference_return r = (DMLSelectParser.table_reference_return) $table_referenceGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("table_reference");
	    		from_clauseReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}

		// Returns the Node with CST Leaves/Nodes
		$from_clause.returnNode = from_clauseReturnNode;
	}
	;

table_reference returns [Node returnNode] 
:	 table_nameGen+=table_name ( correlation_specificationGen+=correlation_specification)? 
	{
		// Create return CST Node
		Node table_referenceReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		table_referenceReturnNode.setKind("table_reference");
	    // Create a CST Node
		if($table_nameGen != null) {
	        for(Iterator it = $table_nameGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.table_name_return r = (DMLSelectParser.table_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("table_name");
	            	table_referenceReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($correlation_specificationGen != null) {
	        for(Iterator it = $correlation_specificationGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.correlation_specification_return r = (DMLSelectParser.correlation_specification_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("correlation_specification");
	            	table_referenceReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$table_reference.returnNode = table_referenceReturnNode;
	}
	;

table_name returns [Node returnNode] 
:	 IDGen=ID 
	{
		// Create return CST Node
		Node table_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		table_nameReturnNode.setKind("table_name");
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			table_nameReturnNode.getChildren().add(IDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$table_name.returnNode = table_nameReturnNode;
	}
	;
	
correlation_specification returns [Node returnNode] 
:	 ( TK_0='AS')?  correlation_nameGen+=correlation_name 
	{
		// Create return CST Node
		Node correlation_specificationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		correlation_specificationReturnNode.setKind("correlation_specification");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		correlation_specificationReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($correlation_nameGen != null) {
	        for(Iterator it = $correlation_nameGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.correlation_name_return r = (DMLSelectParser.correlation_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("correlation_name");
	            	correlation_specificationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$correlation_specification.returnNode = correlation_specificationReturnNode;
	}
	;

correlation_name returns [Node returnNode] 
:	 IDGen=ID 
	{
		// Create return CST Node
		Node correlation_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		correlation_nameReturnNode.setKind("correlation_name");
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			correlation_nameReturnNode.getChildren().add(IDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$correlation_name.returnNode = correlation_nameReturnNode;
	}
	;

where_clause returns [Node returnNode] 
:	 TK_0='WHERE'  search_conditionGen+=search_condition 
	{
		// Create return CST Node
		Node where_clauseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		where_clauseReturnNode.setKind("where_clause");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		where_clauseReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($search_conditionGen != null) {
	        for(Iterator it = $search_conditionGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.search_condition_return r = (DMLSelectParser.search_condition_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("search_condition");
	            	where_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$where_clause.returnNode = where_clauseReturnNode;
	}
	;

group_by_clause returns [Node returnNode] 
:	 TK_0='GROUP BY' ( grouping_column_reference_listGen+=grouping_column_reference_list)? 
	{
		// Create return CST Node
		Node group_by_clauseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		group_by_clauseReturnNode.setKind("group_by_clause");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		group_by_clauseReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($grouping_column_reference_listGen != null) {
	        for(Iterator it = $grouping_column_reference_listGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.grouping_column_reference_list_return r = (DMLSelectParser.grouping_column_reference_list_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("grouping_column_reference_list");
	            	group_by_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$group_by_clause.returnNode = group_by_clauseReturnNode;
	}
	;

grouping_column_reference_list returns [Node returnNode] 
:	 grouping_column_referenceGen+=grouping_column_reference ( COMMAGen_List+=COMMA  grouping_column_referenceGen_1+=grouping_column_reference)* 
	{
		// Create return CST Node
		Node grouping_column_reference_listReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		grouping_column_reference_listReturnNode.setKind("grouping_column_reference_list");
	    // Create a CST Node
		if($grouping_column_referenceGen != null) {
	        for(Iterator it = $grouping_column_referenceGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.grouping_column_reference_return r = (DMLSelectParser.grouping_column_reference_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("grouping_column_reference");
	            	grouping_column_reference_listReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }

		// Create a special CST Node for terminal COMMAGen_List aggregation
		if($COMMAGen_List != null) {
	    for(int pos = 0; pos < $COMMAGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($COMMAGen_List != null) {
		    Token t = (Token) $COMMAGen_List.get(pos); 
		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("COMMA", t.getText(), t.getCharPositionInLine(), t.getLine());
			grouping_column_reference_listReturnNode.getChildren().add(COMMAGen_ListLeaf);
		}
		// No Terminal extractor
	    if($grouping_column_referenceGen_1 != null) {		
	    	DMLSelectParser.grouping_column_reference_return r = (DMLSelectParser.grouping_column_reference_return) $grouping_column_referenceGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("grouping_column_reference");
	    		grouping_column_reference_listReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}

		// Returns the Node with CST Leaves/Nodes
		$grouping_column_reference_list.returnNode = grouping_column_reference_listReturnNode;
	}
	;

grouping_column_reference returns [Node returnNode] 
:	 column_referenceGen+=column_reference 
	{
		// Create return CST Node
		Node grouping_column_referenceReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		grouping_column_referenceReturnNode.setKind("grouping_column_reference");
	    // Create a CST Node
		if($column_referenceGen != null) {
	        for(Iterator it = $column_referenceGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.column_reference_return r = (DMLSelectParser.column_reference_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("column_reference");
	            	grouping_column_referenceReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$grouping_column_reference.returnNode = grouping_column_referenceReturnNode;
	}
	;

column_reference returns [Node returnNode] 
:	( table_nameGen+=table_name  PERIODGen=PERIOD)?  column_nameGen+=column_name 
	{
		// Create return CST Node
		Node column_referenceReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		column_referenceReturnNode.setKind("column_reference");
	    // Create a CST Node
		if($table_nameGen != null) {
	        for(Iterator it = $table_nameGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.table_name_return r = (DMLSelectParser.table_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("table_name");
	            	column_referenceReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($PERIODGen != null) {
			Leaf PERIODGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PERIOD", $PERIODGen.text, PERIODGen.getCharPositionInLine(), PERIODGen.getLine());
			column_referenceReturnNode.getChildren().add(PERIODGenLeaf);
		}
	    // Create a CST Node
		if($column_nameGen != null) {
	        for(Iterator it = $column_nameGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.column_name_return r = (DMLSelectParser.column_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("column_name");
	            	column_referenceReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$column_reference.returnNode = column_referenceReturnNode;
	}
	;

having_clause returns [Node returnNode] 
:	 TK_0='HAVING'  search_conditionGen+=search_condition 
	{
		// Create return CST Node
		Node having_clauseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		having_clauseReturnNode.setKind("having_clause");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		having_clauseReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($search_conditionGen != null) {
	        for(Iterator it = $search_conditionGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.search_condition_return r = (DMLSelectParser.search_condition_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("search_condition");
	            	having_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$having_clause.returnNode = having_clauseReturnNode;
	}
	;

search_condition returns [Node returnNode] 
:	 boolean_termGen+=boolean_term  ( TK_0='OR'  boolean_termGen_1+=boolean_term)* 
	{
		// Create return CST Node
		Node search_conditionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		search_conditionReturnNode.setKind("search_condition");
	    // Create a CST Node
		if($boolean_termGen != null) {
	        for(Iterator it = $boolean_termGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.boolean_term_return r = (DMLSelectParser.boolean_term_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("boolean_term");
	            	search_conditionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }

		// Create a special CST Node for terminal boolean_termGen_1 aggregation
		if($boolean_termGen_1 != null) {
	    for(int pos = 0; pos < $boolean_termGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		search_conditionReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// No Terminal extractor
	    if($boolean_termGen_1 != null) {		
	    	DMLSelectParser.boolean_term_return r = (DMLSelectParser.boolean_term_return) $boolean_termGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("boolean_term");
	    		search_conditionReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}

		// Returns the Node with CST Leaves/Nodes
		$search_condition.returnNode = search_conditionReturnNode;
	}
	;

boolean_term returns [Node returnNode] 
:	 boolean_factorGen+=boolean_factor ( TK_0='AND'  boolean_factorGen_1+=boolean_factor)* 
	{
		// Create return CST Node
		Node boolean_termReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		boolean_termReturnNode.setKind("boolean_term");
	    // Create a CST Node
		if($boolean_factorGen != null) {
	        for(Iterator it = $boolean_factorGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.boolean_factor_return r = (DMLSelectParser.boolean_factor_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("boolean_factor");
	            	boolean_termReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }

		// Create a special CST Node for terminal boolean_factorGen_1 aggregation
		if($boolean_factorGen_1 != null) {
	    for(int pos = 0; pos < $boolean_factorGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		boolean_termReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// No Terminal extractor
	    if($boolean_factorGen_1 != null) {		
	    	DMLSelectParser.boolean_factor_return r = (DMLSelectParser.boolean_factor_return) $boolean_factorGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("boolean_factor");
	    		boolean_termReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}

		// Returns the Node with CST Leaves/Nodes
		$boolean_term.returnNode = boolean_termReturnNode;
	}
	;

boolean_factor returns [Node returnNode] 
:	( TK_0='NOT')?  predicateGen+=predicate 
	{
		// Create return CST Node
		Node boolean_factorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		boolean_factorReturnNode.setKind("boolean_factor");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		boolean_factorReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($predicateGen != null) {
	        for(Iterator it = $predicateGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.predicate_return r = (DMLSelectParser.predicate_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("predicate");
	            	boolean_factorReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$boolean_factor.returnNode = boolean_factorReturnNode;
	}
	;

predicate returns [Node returnNode] 
:	 comparison_predicateGen+=comparison_predicate 
	{
		// Create return CST Node
		Node predicateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		predicateReturnNode.setKind("predicate");
	    // Create a CST Node
		if($comparison_predicateGen != null) {
	        for(Iterator it = $comparison_predicateGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.comparison_predicate_return r = (DMLSelectParser.comparison_predicate_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("comparison_predicate");
	            	predicateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$predicate.returnNode = predicateReturnNode;
	} |  between_predicateGen+=between_predicate 
	{
		// Create return CST Node
		Node predicateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		predicateReturnNode.setKind("predicate");
	    // Create a CST Node
		if($between_predicateGen != null) {
	        for(Iterator it = $between_predicateGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.between_predicate_return r = (DMLSelectParser.between_predicate_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("between_predicate");
	            	predicateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$predicate.returnNode = predicateReturnNode;
	} |  in_predicateGen+=in_predicate 
	{
		// Create return CST Node
		Node predicateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		predicateReturnNode.setKind("predicate");
	    // Create a CST Node
		if($in_predicateGen != null) {
	        for(Iterator it = $in_predicateGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.in_predicate_return r = (DMLSelectParser.in_predicate_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("in_predicate");
	            	predicateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$predicate.returnNode = predicateReturnNode;
	} |  like_predicateGen+=like_predicate 
	{
		// Create return CST Node
		Node predicateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		predicateReturnNode.setKind("predicate");
	    // Create a CST Node
		if($like_predicateGen != null) {
	        for(Iterator it = $like_predicateGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.like_predicate_return r = (DMLSelectParser.like_predicate_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("like_predicate");
	            	predicateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$predicate.returnNode = predicateReturnNode;
	} |  null_predicateGen+=null_predicate 
	{
		// Create return CST Node
		Node predicateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		predicateReturnNode.setKind("predicate");
	    // Create a CST Node
		if($null_predicateGen != null) {
	        for(Iterator it = $null_predicateGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.null_predicate_return r = (DMLSelectParser.null_predicate_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("null_predicate");
	            	predicateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$predicate.returnNode = predicateReturnNode;
	}
	;

comparison_predicate returns [Node returnNode] 
:	 complete_comparison_predicateGen+=complete_comparison_predicate 
	{
		// Create return CST Node
		Node comparison_predicateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		comparison_predicateReturnNode.setKind("comparison_predicate");
	    // Create a CST Node
		if($complete_comparison_predicateGen != null) {
	        for(Iterator it = $complete_comparison_predicateGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.complete_comparison_predicate_return r = (DMLSelectParser.complete_comparison_predicate_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("complete_comparison_predicate");
	            	comparison_predicateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$comparison_predicate.returnNode = comparison_predicateReturnNode;
	} |  incomplete_comparison_predicateGen+=incomplete_comparison_predicate 
	{
		// Create return CST Node
		Node comparison_predicateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		comparison_predicateReturnNode.setKind("comparison_predicate");
	    // Create a CST Node
		if($incomplete_comparison_predicateGen != null) {
	        for(Iterator it = $incomplete_comparison_predicateGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.incomplete_comparison_predicate_return r = (DMLSelectParser.incomplete_comparison_predicate_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("incomplete_comparison_predicate");
	            	comparison_predicateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$comparison_predicate.returnNode = comparison_predicateReturnNode;
	}
	;

complete_comparison_predicate returns [Node returnNode] 
:	 row_value_constructorGen+=row_value_constructor  comp_opGen+=comp_op  row_value_constructorGen_1+=row_value_constructor 
	{
		// Create return CST Node
		Node complete_comparison_predicateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		complete_comparison_predicateReturnNode.setKind("complete_comparison_predicate");
	    // Create a CST Node
		if($row_value_constructorGen != null) {
	        for(Iterator it = $row_value_constructorGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.row_value_constructor_return r = (DMLSelectParser.row_value_constructor_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("row_value_constructor");
	            	complete_comparison_predicateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($comp_opGen != null) {
	        for(Iterator it = $comp_opGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.comp_op_return r = (DMLSelectParser.comp_op_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("comp_op");
	            	complete_comparison_predicateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($row_value_constructorGen_1 != null) {
	        for(Iterator it = $row_value_constructorGen_1.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.row_value_constructor_return r = (DMLSelectParser.row_value_constructor_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("row_value_constructor");
	            	complete_comparison_predicateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$complete_comparison_predicate.returnNode = complete_comparison_predicateReturnNode;
	}
	;

incomplete_comparison_predicate returns [Node returnNode] 
:	 row_value_constructorGen+=row_value_constructor  comp_opGen+=comp_op 
	{
		// Create return CST Node
		Node incomplete_comparison_predicateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		incomplete_comparison_predicateReturnNode.setKind("incomplete_comparison_predicate");
	    // Create a CST Node
		if($row_value_constructorGen != null) {
	        for(Iterator it = $row_value_constructorGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.row_value_constructor_return r = (DMLSelectParser.row_value_constructor_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("row_value_constructor");
	            	incomplete_comparison_predicateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($comp_opGen != null) {
	        for(Iterator it = $comp_opGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.comp_op_return r = (DMLSelectParser.comp_op_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("comp_op");
	            	incomplete_comparison_predicateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$incomplete_comparison_predicate.returnNode = incomplete_comparison_predicateReturnNode;
	} |  comp_opGen+=comp_op  row_value_constructorGen+=row_value_constructor 
	{
		// Create return CST Node
		Node incomplete_comparison_predicateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		incomplete_comparison_predicateReturnNode.setKind("incomplete_comparison_predicate");
	    // Create a CST Node
		if($comp_opGen != null) {
	        for(Iterator it = $comp_opGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.comp_op_return r = (DMLSelectParser.comp_op_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("comp_op");
	            	incomplete_comparison_predicateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($row_value_constructorGen != null) {
	        for(Iterator it = $row_value_constructorGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.row_value_constructor_return r = (DMLSelectParser.row_value_constructor_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("row_value_constructor");
	            	incomplete_comparison_predicateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$incomplete_comparison_predicate.returnNode = incomplete_comparison_predicateReturnNode;
	} |  comp_opGen+=comp_op 
	{
		// Create return CST Node
		Node incomplete_comparison_predicateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		incomplete_comparison_predicateReturnNode.setKind("incomplete_comparison_predicate");
	    // Create a CST Node
		if($comp_opGen != null) {
	        for(Iterator it = $comp_opGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.comp_op_return r = (DMLSelectParser.comp_op_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("comp_op");
	            	incomplete_comparison_predicateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$incomplete_comparison_predicate.returnNode = incomplete_comparison_predicateReturnNode;
	}
	;

row_value_constructor returns [Node returnNode] 
:	 NULL_SPECIFICATIONGen=NULL_SPECIFICATION 
	{
		// Create return CST Node
		Node row_value_constructorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		row_value_constructorReturnNode.setKind("row_value_constructor");
	    // Create a CST Leaf
		if($NULL_SPECIFICATIONGen != null) {
			Leaf NULL_SPECIFICATIONGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NULL_SPECIFICATION", $NULL_SPECIFICATIONGen.text, NULL_SPECIFICATIONGen.getCharPositionInLine(), NULL_SPECIFICATIONGen.getLine());
			row_value_constructorReturnNode.getChildren().add(NULL_SPECIFICATIONGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$row_value_constructor.returnNode = row_value_constructorReturnNode;
	} |  DEFAULT_SPECIFICATIONGen=DEFAULT_SPECIFICATION 
	{
		// Create return CST Node
		Node row_value_constructorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		row_value_constructorReturnNode.setKind("row_value_constructor");
	    // Create a CST Leaf
		if($DEFAULT_SPECIFICATIONGen != null) {
			Leaf DEFAULT_SPECIFICATIONGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DEFAULT_SPECIFICATION", $DEFAULT_SPECIFICATIONGen.text, DEFAULT_SPECIFICATIONGen.getCharPositionInLine(), DEFAULT_SPECIFICATIONGen.getLine());
			row_value_constructorReturnNode.getChildren().add(DEFAULT_SPECIFICATIONGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$row_value_constructor.returnNode = row_value_constructorReturnNode;
	} |  UNSIGNED_INTEGERGen=UNSIGNED_INTEGER 
	{
		// Create return CST Node
		Node row_value_constructorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		row_value_constructorReturnNode.setKind("row_value_constructor");
	    // Create a CST Leaf
		if($UNSIGNED_INTEGERGen != null) {
			Leaf UNSIGNED_INTEGERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("UNSIGNED_INTEGER", $UNSIGNED_INTEGERGen.text, UNSIGNED_INTEGERGen.getCharPositionInLine(), UNSIGNED_INTEGERGen.getLine());
			row_value_constructorReturnNode.getChildren().add(UNSIGNED_INTEGERGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$row_value_constructor.returnNode = row_value_constructorReturnNode;
	} |  column_referenceGen+=column_reference 
	{
		// Create return CST Node
		Node row_value_constructorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		row_value_constructorReturnNode.setKind("row_value_constructor");
	    // Create a CST Node
		if($column_referenceGen != null) {
	        for(Iterator it = $column_referenceGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.column_reference_return r = (DMLSelectParser.column_reference_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("column_reference");
	            	row_value_constructorReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$row_value_constructor.returnNode = row_value_constructorReturnNode;
	} |  expressionGen+=expression 
	{
		// Create return CST Node
		Node row_value_constructorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		row_value_constructorReturnNode.setKind("row_value_constructor");
	    // Create a CST Node
		if($expressionGen != null) {
	        for(Iterator it = $expressionGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.expression_return r = (DMLSelectParser.expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expression");
	            	row_value_constructorReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$row_value_constructor.returnNode = row_value_constructorReturnNode;
	}
	;

comp_op returns [Node returnNode] 
:	 EQUALS_OPERATORGen=EQUALS_OPERATOR 
	{
		// Create return CST Node
		Node comp_opReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		comp_opReturnNode.setKind("comp_op");
	    // Create a CST Leaf
		if($EQUALS_OPERATORGen != null) {
			Leaf EQUALS_OPERATORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQUALS_OPERATOR", $EQUALS_OPERATORGen.text, EQUALS_OPERATORGen.getCharPositionInLine(), EQUALS_OPERATORGen.getLine());
			comp_opReturnNode.getChildren().add(EQUALS_OPERATORGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$comp_op.returnNode = comp_opReturnNode;
	} |  NOT_EQUALS_OPERATORGen=NOT_EQUALS_OPERATOR 
	{
		// Create return CST Node
		Node comp_opReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		comp_opReturnNode.setKind("comp_op");
	    // Create a CST Leaf
		if($NOT_EQUALS_OPERATORGen != null) {
			Leaf NOT_EQUALS_OPERATORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NOT_EQUALS_OPERATOR", $NOT_EQUALS_OPERATORGen.text, NOT_EQUALS_OPERATORGen.getCharPositionInLine(), NOT_EQUALS_OPERATORGen.getLine());
			comp_opReturnNode.getChildren().add(NOT_EQUALS_OPERATORGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$comp_op.returnNode = comp_opReturnNode;
	} |  LESS_THAN_OPERATORGen=LESS_THAN_OPERATOR 
	{
		// Create return CST Node
		Node comp_opReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		comp_opReturnNode.setKind("comp_op");
	    // Create a CST Leaf
		if($LESS_THAN_OPERATORGen != null) {
			Leaf LESS_THAN_OPERATORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LESS_THAN_OPERATOR", $LESS_THAN_OPERATORGen.text, LESS_THAN_OPERATORGen.getCharPositionInLine(), LESS_THAN_OPERATORGen.getLine());
			comp_opReturnNode.getChildren().add(LESS_THAN_OPERATORGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$comp_op.returnNode = comp_opReturnNode;
	} |  GREATER_THAN_OPERATORGen=GREATER_THAN_OPERATOR 
	{
		// Create return CST Node
		Node comp_opReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		comp_opReturnNode.setKind("comp_op");
	    // Create a CST Leaf
		if($GREATER_THAN_OPERATORGen != null) {
			Leaf GREATER_THAN_OPERATORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREATER_THAN_OPERATOR", $GREATER_THAN_OPERATORGen.text, GREATER_THAN_OPERATORGen.getCharPositionInLine(), GREATER_THAN_OPERATORGen.getLine());
			comp_opReturnNode.getChildren().add(GREATER_THAN_OPERATORGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$comp_op.returnNode = comp_opReturnNode;
	} |  LESS_THAN_OR_EQUALS_OPERATORGen=LESS_THAN_OR_EQUALS_OPERATOR 
	{
		// Create return CST Node
		Node comp_opReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		comp_opReturnNode.setKind("comp_op");
	    // Create a CST Leaf
		if($LESS_THAN_OR_EQUALS_OPERATORGen != null) {
			Leaf LESS_THAN_OR_EQUALS_OPERATORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LESS_THAN_OR_EQUALS_OPERATOR", $LESS_THAN_OR_EQUALS_OPERATORGen.text, LESS_THAN_OR_EQUALS_OPERATORGen.getCharPositionInLine(), LESS_THAN_OR_EQUALS_OPERATORGen.getLine());
			comp_opReturnNode.getChildren().add(LESS_THAN_OR_EQUALS_OPERATORGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$comp_op.returnNode = comp_opReturnNode;
	} |  GREATER_THAN_OR_EQUALS_OPERATORGen=GREATER_THAN_OR_EQUALS_OPERATOR 
	{
		// Create return CST Node
		Node comp_opReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		comp_opReturnNode.setKind("comp_op");
	    // Create a CST Leaf
		if($GREATER_THAN_OR_EQUALS_OPERATORGen != null) {
			Leaf GREATER_THAN_OR_EQUALS_OPERATORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREATER_THAN_OR_EQUALS_OPERATOR", $GREATER_THAN_OR_EQUALS_OPERATORGen.text, GREATER_THAN_OR_EQUALS_OPERATORGen.getCharPositionInLine(), GREATER_THAN_OR_EQUALS_OPERATORGen.getLine());
			comp_opReturnNode.getChildren().add(GREATER_THAN_OR_EQUALS_OPERATORGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$comp_op.returnNode = comp_opReturnNode;
	}
	;

between_predicate returns [Node returnNode] 
:	 row_value_constructorGen+=row_value_constructor ( TK_0='NOT')?  TK_1='BETWEEN' ( row_value_constructorGen_1+=row_value_constructor)?  TK_2='AND' ( row_value_constructorGen_2+=row_value_constructor)? 
	{
		// Create return CST Node
		Node between_predicateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		between_predicateReturnNode.setKind("between_predicate");
	    // Create a CST Node
		if($row_value_constructorGen != null) {
	        for(Iterator it = $row_value_constructorGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.row_value_constructor_return r = (DMLSelectParser.row_value_constructor_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("row_value_constructor");
	            	between_predicateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		between_predicateReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		between_predicateReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($row_value_constructorGen_1 != null) {
	        for(Iterator it = $row_value_constructorGen_1.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.row_value_constructor_return r = (DMLSelectParser.row_value_constructor_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("row_value_constructor");
	            	between_predicateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		between_predicateReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($row_value_constructorGen_2 != null) {
	        for(Iterator it = $row_value_constructorGen_2.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.row_value_constructor_return r = (DMLSelectParser.row_value_constructor_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("row_value_constructor");
	            	between_predicateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$between_predicate.returnNode = between_predicateReturnNode;
	}
	;

in_predicate returns [Node returnNode] 
:	 row_value_constructorGen+=row_value_constructor ( TK_0='NOT')?  TK_1='IN'  in_predicate_valueGen+=in_predicate_value 
	{
		// Create return CST Node
		Node in_predicateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		in_predicateReturnNode.setKind("in_predicate");
	    // Create a CST Node
		if($row_value_constructorGen != null) {
	        for(Iterator it = $row_value_constructorGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.row_value_constructor_return r = (DMLSelectParser.row_value_constructor_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("row_value_constructor");
	            	in_predicateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		in_predicateReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		in_predicateReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($in_predicate_valueGen != null) {
	        for(Iterator it = $in_predicate_valueGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.in_predicate_value_return r = (DMLSelectParser.in_predicate_value_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("in_predicate_value");
	            	in_predicateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$in_predicate.returnNode = in_predicateReturnNode;
	}
	;

in_predicate_value returns [Node returnNode] 
:	 LEFT_PARENTGen=LEFT_PARENT  in_value_listGen+=in_value_list  RIGHT_PARENTGen=RIGHT_PARENT 
	{
		// Create return CST Node
		Node in_predicate_valueReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		in_predicate_valueReturnNode.setKind("in_predicate_value");
	    // Create a CST Leaf
		if($LEFT_PARENTGen != null) {
			Leaf LEFT_PARENTGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LEFT_PARENT", $LEFT_PARENTGen.text, LEFT_PARENTGen.getCharPositionInLine(), LEFT_PARENTGen.getLine());
			in_predicate_valueReturnNode.getChildren().add(LEFT_PARENTGenLeaf);
		}
	    // Create a CST Node
		if($in_value_listGen != null) {
	        for(Iterator it = $in_value_listGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.in_value_list_return r = (DMLSelectParser.in_value_list_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("in_value_list");
	            	in_predicate_valueReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RIGHT_PARENTGen != null) {
			Leaf RIGHT_PARENTGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RIGHT_PARENT", $RIGHT_PARENTGen.text, RIGHT_PARENTGen.getCharPositionInLine(), RIGHT_PARENTGen.getLine());
			in_predicate_valueReturnNode.getChildren().add(RIGHT_PARENTGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$in_predicate_value.returnNode = in_predicate_valueReturnNode;
	}
	;

in_value_list returns [Node returnNode] 
:	 derived_columnGen+=derived_column ( COMMAGen_List+=COMMA  derived_columnGen_1+=derived_column)* 
	{
		// Create return CST Node
		Node in_value_listReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		in_value_listReturnNode.setKind("in_value_list");
	    // Create a CST Node
		if($derived_columnGen != null) {
	        for(Iterator it = $derived_columnGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.derived_column_return r = (DMLSelectParser.derived_column_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("derived_column");
	            	in_value_listReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }

		// Create a special CST Node for terminal COMMAGen_List aggregation
		if($COMMAGen_List != null) {
	    for(int pos = 0; pos < $COMMAGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($COMMAGen_List != null) {
		    Token t = (Token) $COMMAGen_List.get(pos); 
		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("COMMA", t.getText(), t.getCharPositionInLine(), t.getLine());
			in_value_listReturnNode.getChildren().add(COMMAGen_ListLeaf);
		}
		// No Terminal extractor
	    if($derived_columnGen_1 != null) {		
	    	DMLSelectParser.derived_column_return r = (DMLSelectParser.derived_column_return) $derived_columnGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("derived_column");
	    		in_value_listReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}

		// Returns the Node with CST Leaves/Nodes
		$in_value_list.returnNode = in_value_listReturnNode;
	}
	;

like_predicate returns [Node returnNode] 
:	 match_valueGen+=match_value ( TK_0='NOT')?  TK_1='LIKE' ( patternGen+=pattern)? 
	{
		// Create return CST Node
		Node like_predicateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		like_predicateReturnNode.setKind("like_predicate");
	    // Create a CST Node
		if($match_valueGen != null) {
	        for(Iterator it = $match_valueGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.match_value_return r = (DMLSelectParser.match_value_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("match_value");
	            	like_predicateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		like_predicateReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		like_predicateReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($patternGen != null) {
	        for(Iterator it = $patternGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.pattern_return r = (DMLSelectParser.pattern_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("pattern");
	            	like_predicateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$like_predicate.returnNode = like_predicateReturnNode;
	}
	;
	
match_value returns [Node returnNode] 
:	 derived_columnGen+=derived_column 
	{
		// Create return CST Node
		Node match_valueReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		match_valueReturnNode.setKind("match_value");
	    // Create a CST Node
		if($derived_columnGen != null) {
	        for(Iterator it = $derived_columnGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.derived_column_return r = (DMLSelectParser.derived_column_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("derived_column");
	            	match_valueReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$match_value.returnNode = match_valueReturnNode;
	} |  expressionGen+=expression 
	{
		// Create return CST Node
		Node match_valueReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		match_valueReturnNode.setKind("match_value");
	    // Create a CST Node
		if($expressionGen != null) {
	        for(Iterator it = $expressionGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.expression_return r = (DMLSelectParser.expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expression");
	            	match_valueReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$match_value.returnNode = match_valueReturnNode;
	}
	;
	
pattern returns [Node returnNode] 
:	 derived_columnGen+=derived_column 
	{
		// Create return CST Node
		Node patternReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		patternReturnNode.setKind("pattern");
	    // Create a CST Node
		if($derived_columnGen != null) {
	        for(Iterator it = $derived_columnGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.derived_column_return r = (DMLSelectParser.derived_column_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("derived_column");
	            	patternReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$pattern.returnNode = patternReturnNode;
	} |  expressionGen+=expression 
	{
		// Create return CST Node
		Node patternReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		patternReturnNode.setKind("pattern");
	    // Create a CST Node
		if($expressionGen != null) {
	        for(Iterator it = $expressionGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.expression_return r = (DMLSelectParser.expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expression");
	            	patternReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$pattern.returnNode = patternReturnNode;
	}
	;
	
null_predicate returns [Node returnNode] 
:	 TK_0='IS' ( TK_1='NOT')?  TK_2='NULL' 
	{
		// Create return CST Node
		Node null_predicateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		null_predicateReturnNode.setKind("null_predicate");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		null_predicateReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		null_predicateReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		null_predicateReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$null_predicate.returnNode = null_predicateReturnNode;
	}
	;

order_by_clause returns [Node returnNode] 
:	 TK_0='ORDER BY' ( sort_specification_listGen+=sort_specification_list)? 
	{
		// Create return CST Node
		Node order_by_clauseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		order_by_clauseReturnNode.setKind("order_by_clause");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		order_by_clauseReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($sort_specification_listGen != null) {
	        for(Iterator it = $sort_specification_listGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.sort_specification_list_return r = (DMLSelectParser.sort_specification_list_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sort_specification_list");
	            	order_by_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$order_by_clause.returnNode = order_by_clauseReturnNode;
	}
	;

sort_specification_list returns [Node returnNode] 
:	 sort_specificationGen+=sort_specification ( COMMAGen_List+=COMMA  sort_specificationGen_1+=sort_specification)* 
	{
		// Create return CST Node
		Node sort_specification_listReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		sort_specification_listReturnNode.setKind("sort_specification_list");
	    // Create a CST Node
		if($sort_specificationGen != null) {
	        for(Iterator it = $sort_specificationGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.sort_specification_return r = (DMLSelectParser.sort_specification_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sort_specification");
	            	sort_specification_listReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }

		// Create a special CST Node for terminal COMMAGen_List aggregation
		if($COMMAGen_List != null) {
	    for(int pos = 0; pos < $COMMAGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($COMMAGen_List != null) {
		    Token t = (Token) $COMMAGen_List.get(pos); 
		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("COMMA", t.getText(), t.getCharPositionInLine(), t.getLine());
			sort_specification_listReturnNode.getChildren().add(COMMAGen_ListLeaf);
		}
		// No Terminal extractor
	    if($sort_specificationGen_1 != null) {		
	    	DMLSelectParser.sort_specification_return r = (DMLSelectParser.sort_specification_return) $sort_specificationGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("sort_specification");
	    		sort_specification_listReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}

		// Returns the Node with CST Leaves/Nodes
		$sort_specification_list.returnNode = sort_specification_listReturnNode;
	}
	;
	
sort_specification returns [Node returnNode] 
:	 sort_keyGen+=sort_key ( ORDERING_SPECIFICATIONGen=ORDERING_SPECIFICATION)? 
	{
		// Create return CST Node
		Node sort_specificationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		sort_specificationReturnNode.setKind("sort_specification");
	    // Create a CST Node
		if($sort_keyGen != null) {
	        for(Iterator it = $sort_keyGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.sort_key_return r = (DMLSelectParser.sort_key_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sort_key");
	            	sort_specificationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($ORDERING_SPECIFICATIONGen != null) {
			Leaf ORDERING_SPECIFICATIONGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ORDERING_SPECIFICATION", $ORDERING_SPECIFICATIONGen.text, ORDERING_SPECIFICATIONGen.getCharPositionInLine(), ORDERING_SPECIFICATIONGen.getLine());
			sort_specificationReturnNode.getChildren().add(ORDERING_SPECIFICATIONGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$sort_specification.returnNode = sort_specificationReturnNode;
	}
	;

sort_key returns [Node returnNode] 
:	 column_nameGen+=column_name 
	{
		// Create return CST Node
		Node sort_keyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		sort_keyReturnNode.setKind("sort_key");
	    // Create a CST Node
		if($column_nameGen != null) {
	        for(Iterator it = $column_nameGen.iterator(); it.hasNext(); )  { 
	            DMLSelectParser.column_name_return r = (DMLSelectParser.column_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("column_name");
	            	sort_keyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$sort_key.returnNode = sort_keyReturnNode;
	} |  UNSIGNED_INTEGERGen=UNSIGNED_INTEGER 
	{
		// Create return CST Node
		Node sort_keyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		sort_keyReturnNode.setKind("sort_key");
	    // Create a CST Leaf
		if($UNSIGNED_INTEGERGen != null) {
			Leaf UNSIGNED_INTEGERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("UNSIGNED_INTEGER", $UNSIGNED_INTEGERGen.text, UNSIGNED_INTEGERGen.getCharPositionInLine(), UNSIGNED_INTEGERGen.getLine());
			sort_keyReturnNode.getChildren().add(UNSIGNED_INTEGERGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$sort_key.returnNode = sort_keyReturnNode;
	}
	;

EQUALS_OPERATOR
	:	'='
	;

NOT_EQUALS_OPERATOR
	:	'<>'
	;

LESS_THAN_OPERATOR
	:	'<'
	;

GREATER_THAN_OPERATOR
	:	'>'
	;

LESS_THAN_OR_EQUALS_OPERATOR
	:	'<='
	;

GREATER_THAN_OR_EQUALS_OPERATOR
	:	'>='
	;
NULL_SPECIFICATION
	:	'NULL'
	;

DEFAULT_SPECIFICATION
	:	'DEFAULT'
	;

TRUTH_VALUE
	:	'TRUE' | 'FALSE' | 'UNKNOWN'
	;

LEFT_PARENT
	:	'('
	;

RIGHT_PARENT
	:	')'
	;

SET_QUANTIFIER
	:	'DISTINCT' | 'ALL'
	;
	
ASTERISK
	:	'*'
	;
	
COMMA
	:	','
	;
	
PERIOD
	:	'.'
	;
	
ORDERING_SPECIFICATION
	:	'ASC' | 'DESC'
	;
	
UNSIGNED_INTEGER
	:	('0'..'9')*
	;

ID
	:	('a'..'z'|'A'..'Z'|'0'..'9'|'_'|'?'|':')*
	;

IDEXPRESSION
	:	('a'..'z'|'A'..'Z'|'0'..'9'|'_'|'?'|':'|'('|')'|'+'|'-'|'*'|'/'|'%'|'\'')*
	;
	
WS 	: (' ' | '\t' | '\n' | '\r' | '\u000C')+ {$channel=HIDDEN;};